{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_orderBookAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "getDecreaseOrders",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_orderBookAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
     "name": "getDecreaseOrdersV2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_orderBookAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "getIncreaseOrders",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_orderBookAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "getSwapOrders",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea78cef9b6fa3c2392a8c9aa3a18e39d3e5dbc13355221927a2233232ad328bf",
  "receipt": {
    "to": null,
    "from": "0xc1048DB8e91E68b468b1d7B513fbB666C6e1622D",
    "contractAddress": "0x6FeeB0013ed6a3299b4e7696Dd312919c1a20F29",
    "transactionIndex": 0,
    "gasUsed": "1069969",
    "logsBloom": "0x
    "blockHash": "0x337776d1f65c06c1e731b43ca00d25cd84c1be87aa0de1b0b353adbed5a017e4",
    "transactionHash": "0xea78cef9b6fa3c2392a8c9aa3a18e39d3e5dbc13355221927a2233232ad328bf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32924586,
        "transactionHash": "0xea78cef9b6fa3c2392a8c9aa3a18e39d3e5dbc13355221927a2233232ad328bf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1048db8e91e68b468b1d7b513fbb666c6e1622d",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000ed94b22f4a8d6f0000000000000000000000000000000000000000000000001e4ba50142b6dbf90000000000000000000000000000000000000000000001afced2282ec635ab874000000000000000000000000000000000000000000000001d5e104f136c4e8a0000000000000000000000000000000000000000000001afcfbfbce0f58038f64",
        "logIndex": 0,
        "blockHash": "0x337776d1f65c06c1e731b43ca00d25cd84c1be87aa0de1b0b353adbed5a017e4"
      }
    ],
    "blockNumber": 32924586,
    "cumulativeGasUsed": "1069969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b549c54e5dfcca391b304c942bb4c1db",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getDecreaseOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getDecreaseOrdersV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getIncreaseOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getSwapOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripherals/OrderBookReader.sol\":\"OrderBookReader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IOrderBookForReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.9.0;\\n\\ninterface IOrderBookForReader {\\n    function getSwapOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address path0,\\n            address path1,\\n            address path2,\\n            uint256 amountIn,\\n            uint256 minOut,\\n            uint256 triggerRatio,\\n            bool triggerAboveThreshold,\\n            bool shouldUnwrap,\\n            uint256 executionFee\\n        );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address purchaseToken,\\n            uint256 purchaseTokenAmount,\\n            address collateralToken,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address collateralToken,\\n            uint256 collateralDelta,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        );\\n\\n    function getDecreaseOrderV2(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address collateralToken,\\n            address receiveToken,\\n            uint256 collateralDelta,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        );        \\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x6ae359971400f8030c89ac390b38c8a93f15b9219019b0cc7c6e12b5a9eb226a\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/peripherals/OrderBookReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../core/interfaces/IOrderBookForReader.sol\\\";\\n\\ncontract OrderBookReader {\\n    using SafeMath for uint256;\\n\\n    struct Vars {\\n        uint256 i;\\n        uint256 index;\\n        address account;\\n        uint256 uintLength;\\n        uint256 addressLength;\\n    }\\n\\n    function getIncreaseOrders(\\n        address payable _orderBookAddress,\\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 3);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBookForReader orderBook = IOrderBookForReader(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (\\n                address purchaseToken,\\n                uint256 purchaseTokenAmount,\\n                address collateralToken,\\n                address indexToken,\\n                uint256 sizeDelta,\\n                bool isLong,\\n                uint256 triggerPrice,\\n                bool triggerAboveThreshold,\\n\\n            ) = // uint256 executionFee\\n                orderBook.getIncreaseOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(purchaseTokenAmount);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (purchaseToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 2] = (indexToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n    function getDecreaseOrders(\\n        address payable _orderBookAddress,\\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 2);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBookForReader orderBook = IOrderBookForReader(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (address collateralToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, ) = // uint256 executionFee\\n            orderBook.getDecreaseOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(collateralDelta);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (indexToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n    function getDecreaseOrdersV2(\\n        address payable _orderBookAddress,\\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 3);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBookForReader orderBook = IOrderBookForReader(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (address collateralToken,address receiveToken, uint256 collateralDelta, address indexToken, uint256 sizeDelta, bool isLong, uint256 triggerPrice, bool triggerAboveThreshold, ) = // uint256 executionFee\\n            orderBook.getDecreaseOrderV2(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(collateralDelta);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (indexToken);            \\n            addressProps[vars.i * vars.addressLength + 2] = (receiveToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n    function getSwapOrders(\\n        address payable _orderBookAddress,\\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 3);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBookForReader orderBook = IOrderBookForReader(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (address path0, address path1, address path2, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, ) = // uint256 executionFee\\n            orderBook.getSwapOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(amountIn);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(minOut);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(triggerRatio);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerAboveThreshold ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(shouldUnwrap ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (path0);\\n            addressProps[vars.i * vars.addressLength + 1] = (path1);\\n            addressProps[vars.i * vars.addressLength + 2] = (path2);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n}\\n\",\"keccak256\":\"0x4e4151fe521f963172d74f3269d7bc389684070e51d1d801d6caca75285d5e4b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}