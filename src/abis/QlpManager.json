{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdq",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_qlp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortsTracker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cooldownDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aumInUsdq",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qlpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdqAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qlpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aumInUsdq",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qlpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdqAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_COOLDOWN_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QLP_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDQ_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minQlp",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundingAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minQlp",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aumAddition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aumDeduction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "maximise",
          "type": "bool"
        }
      ],
      "name": "getAum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "maximise",
          "type": "bool"
        }
      ],
      "name": "getAumInUsdq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAums",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getGlobalShortAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "getGlobalShortDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAddedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "qlp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_qlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_qlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "removeLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aumAddition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_aumDeduction",
          "type": "uint256"
        }
      ],
      "name": "setAumAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownDuration",
          "type": "uint256"
        }
      ],
      "name": "setCooldownDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IShortsTracker",
          "name": "_shortsTracker",
          "type": "address"
        }
      ],
      "name": "setShortsTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shortsTrackerAveragePriceWeight",
          "type": "uint256"
        }
      ],
      "name": "setShortsTrackerAveragePriceWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTracker",
      "outputs": [
        {
          "internalType": "contract IShortsTracker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTrackerAveragePriceWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdq",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9b6c57b43fd98131332c661a3bbcf3aeae9d78a6869374956d6048b995af00b",
  "receipt": {
    "to": null,
    "from": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",
    "contractAddress": "0x9e8efB8C27f3012493ce315974A64CAcDE6f4ccC",
    "transactionIndex": 0,
    "gasUsed": "2281787",
    "logsBloom": "0x
    "blockHash": "0x3cf5d2b9d1a7f476b5b1c1e51f88a3ff8ad1e7428def6154638d3a8113edc072",
    "transactionHash": "0xc9b6c57b43fd98131332c661a3bbcf3aeae9d78a6869374956d6048b995af00b",
    "logs": [],
    "blockNumber": 37300184,
    "cumulativeGasUsed": "2281787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46E3D301e211d2A2D3148412FCA5788F3182908d",
    "0x40b13914f9886E234E1e00435E76D558FA8cf5ba",
    "0x74E33B80BC77cdB5d49861a53913A8301CB72B4D",
    "0x6FdB1c9e1a1A8beD2EE22a3d5E62CA330ee88ecb",
    900
  ],
  "numDeployments": 1,
  "solcInputHash": "5032b462037753aa34c12a2520cfef64",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdq\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_qlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aumInUsdq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qlpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdqAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qlpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aumInUsdq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qlpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdqAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COOLDOWN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QLP_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDQ_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minQlp\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundingAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minQlp\",\"type\":\"uint256\"}],\"name\":\"addLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aumAddition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aumDeduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"maximise\",\"type\":\"bool\"}],\"name\":\"getAum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"maximise\",\"type\":\"bool\"}],\"name\":\"getAumInUsdq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAums\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGlobalShortAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getGlobalShortDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAddedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aumAddition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aumDeduction\",\"type\":\"uint256\"}],\"name\":\"setAumAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownDuration\",\"type\":\"uint256\"}],\"name\":\"setCooldownDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"_shortsTracker\",\"type\":\"address\"}],\"name\":\"setShortsTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shortsTrackerAveragePriceWeight\",\"type\":\"uint256\"}],\"name\":\"setShortsTrackerAveragePriceWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTracker\",\"outputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTrackerAveragePriceWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdq\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/QlpManager.sol\":\"QlpManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/core/QlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IQlpManager.sol\\\";\\nimport \\\"./interfaces/IShortsTracker.sol\\\";\\nimport \\\"../tokens/interfaces/IUSDQ.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\ncontract QlpManager is ReentrancyGuard, Governable, IQlpManager {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant PRICE_PRECISION = 10**30;\\n    uint256 public constant USDQ_DECIMALS = 18;\\n    uint256 public constant QLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    IVault public override vault;\\n    IShortsTracker public shortsTracker;\\n    address public override usdq;\\n    address public override qlp;\\n\\n    uint256 public override cooldownDuration;\\n    mapping(address => uint256) public override lastAddedAt;\\n\\n    uint256 public aumAddition;\\n    uint256 public aumDeduction;\\n\\n    bool public inPrivateMode;\\n    uint256 public shortsTrackerAveragePriceWeight;\\n    mapping (address => bool) public isHandler;\\n\\n    event AddLiquidity(\\n        address account,\\n        address token,\\n        uint256 amount,\\n        uint256 aumInUsdq,\\n        uint256 qlpSupply,\\n        uint256 usdqAmount,\\n        uint256 mintAmount\\n    );\\n\\n    event RemoveLiquidity(\\n        address account,\\n        address token,\\n        uint256 qlpAmount,\\n        uint256 aumInUsdq,\\n        uint256 qlpSupply,\\n        uint256 usdqAmount,\\n        uint256 amountOut\\n    );\\n\\n    constructor(address _vault, address _usdq, address _qlp, address _shortsTracker, uint256 _cooldownDuration) public {\\n        gov = msg.sender;\\n        vault = IVault(_vault);\\n        usdq = _usdq;\\n        qlp = _qlp;\\n        shortsTracker = IShortsTracker(_shortsTracker);\\n        cooldownDuration = _cooldownDuration;\\n    }\\n\\n    function setInPrivateMode(bool _inPrivateMode) external onlyGov {\\n        inPrivateMode = _inPrivateMode;\\n    }\\n\\n    function setShortsTracker(IShortsTracker _shortsTracker) external onlyGov {\\n        shortsTracker = _shortsTracker;\\n    }\\n\\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external override onlyGov {\\n        require(shortsTrackerAveragePriceWeight <= BASIS_POINTS_DIVISOR, \\\"QlpManager: invalid weight\\\");\\n        shortsTrackerAveragePriceWeight = _shortsTrackerAveragePriceWeight;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function setCooldownDuration(uint256 _cooldownDuration) external override onlyGov {\\n        require(_cooldownDuration <= MAX_COOLDOWN_DURATION, \\\"QlpManager: invalid _cooldownDuration\\\");\\n        cooldownDuration = _cooldownDuration;\\n    }\\n\\n    function setAumAdjustment(uint256 _aumAddition, uint256 _aumDeduction) external onlyGov {\\n        aumAddition = _aumAddition;\\n        aumDeduction = _aumDeduction;\\n    }\\n\\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdq, uint256 _minQlp) external override nonReentrant returns (uint256) {\\n        if (inPrivateMode) { revert(\\\"QlpManager: action not enabled\\\"); }\\n        return _addLiquidity(msg.sender, msg.sender, _token, _amount, _minUsdq, _minQlp);\\n    }\\n\\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdq, uint256 _minQlp) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _addLiquidity(_fundingAccount, _account, _token, _amount, _minUsdq, _minQlp);\\n    }\\n\\n    function removeLiquidity(address _tokenOut, uint256 _qlpAmount, uint256 _minOut, address _receiver) external override nonReentrant returns (uint256) {\\n        if (inPrivateMode) { revert(\\\"QlpManager: action not enabled\\\"); }\\n        return _removeLiquidity(msg.sender, _tokenOut, _qlpAmount, _minOut, _receiver);\\n    }\\n\\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _qlpAmount, uint256 _minOut, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _removeLiquidity(_account, _tokenOut, _qlpAmount, _minOut, _receiver);\\n    }\\n\\n    function getPrice(bool _maximise) external view returns (uint256) {\\n        uint256 aum = getAum(_maximise);\\n        uint256 supply = IERC20(qlp).totalSupply();\\n        return aum.mul(QLP_PRECISION).div(supply);\\n    }\\n\\n    function getAums() public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = getAum(true);\\n        amounts[1] = getAum(false);\\n        return amounts;\\n    }\\n\\n    function getAumInUsdq(bool maximise) public override view returns (uint256) {\\n        uint256 aum = getAum(maximise);\\n        return aum.mul(10 ** USDQ_DECIMALS).div(PRICE_PRECISION);\\n    }\\n\\n    function getAum(bool maximise) public view returns (uint256) {\\n        uint256 length = vault.allWhitelistedTokensLength();\\n        uint256 aum = aumAddition;\\n        uint256 shortProfits = 0;\\n        IVault _vault = vault;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = vault.allWhitelistedTokens(i);\\n            bool isWhitelisted = vault.whitelistedTokens(token);\\n\\n            if (!isWhitelisted) {\\n                continue;\\n            }\\n\\n            uint256 price = maximise ? _vault.getMaxPrice(token) : _vault.getMinPrice(token);\\n            uint256 poolAmount = _vault.poolAmounts(token);\\n            uint256 decimals = _vault.tokenDecimals(token);\\n\\n            if (_vault.stableTokens(token)) {\\n                aum = aum.add(poolAmount.mul(price).div(10 ** decimals));\\n            } else {\\n                // add global short profit / loss\\n                uint256 size = _vault.globalShortSizes(token);\\n\\n                if (size > 0) {\\n                    (uint256 delta, bool hasProfit) = getGlobalShortDelta(token, price, size);\\n                    if (!hasProfit) {\\n                        // add losses from shorts\\n                        aum = aum.add(delta);\\n                    } else {\\n                        shortProfits = shortProfits.add(delta);\\n                    }\\n                }\\n\\n                aum = aum.add(_vault.guaranteedUsd(token));\\n\\n                uint256 reservedAmount = _vault.reservedAmounts(token);\\n                aum = aum.add(poolAmount.sub(reservedAmount).mul(price).div(10 ** decimals));\\n            }\\n        }\\n\\n        aum = shortProfits > aum ? 0 : aum.sub(shortProfits);\\n        return aumDeduction > aum ? 0 : aum.sub(aumDeduction);\\n    }\\n\\n    function getGlobalShortDelta(address _token, uint256 _price, uint256 _size) public view returns (uint256, bool) {\\n        uint256 averagePrice = getGlobalShortAveragePrice(_token);\\n        uint256 priceDelta = averagePrice > _price ? averagePrice.sub(_price) : _price.sub(averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(averagePrice);\\n        return (delta, averagePrice > _price);\\n    }\\n\\n    function getGlobalShortAveragePrice(address _token) public view returns (uint256) {\\n        IShortsTracker _shortsTracker = shortsTracker;\\n        if (address(_shortsTracker) == address(0) || !_shortsTracker.isGlobalShortDataReady()) {\\n            return vault.globalShortAveragePrices(_token);\\n        }\\n\\n        uint256 _shortsTrackerAveragePriceWeight = shortsTrackerAveragePriceWeight;\\n        if (_shortsTrackerAveragePriceWeight == 0) {\\n            return vault.globalShortAveragePrices(_token);\\n        } else if (_shortsTrackerAveragePriceWeight == BASIS_POINTS_DIVISOR) {\\n            return _shortsTracker.globalShortAveragePrices(_token);\\n        }\\n\\n        uint256 vaultAveragePrice = vault.globalShortAveragePrices(_token);\\n        uint256 shortsTrackerAveragePrice = _shortsTracker.globalShortAveragePrices(_token);\\n\\n        return vaultAveragePrice.mul(BASIS_POINTS_DIVISOR.sub(_shortsTrackerAveragePriceWeight))\\n            .add(shortsTrackerAveragePrice.mul(_shortsTrackerAveragePriceWeight))\\n            .div(BASIS_POINTS_DIVISOR);\\n    }\\n\\n    function _addLiquidity(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdq, uint256 _minQlp) private returns (uint256) {\\n        require(_amount > 0, \\\"QlpManager: invalid _amount\\\");\\n\\n        // calculate aum before buyUSDQ\\n        uint256 aumInUsdq = getAumInUsdq(true);\\n        uint256 qlpSupply = IERC20(qlp).totalSupply();\\n\\n        IERC20(_token).safeTransferFrom(_fundingAccount, address(vault), _amount);\\n        uint256 usdqAmount = vault.buyUSDQ(_token, address(this));\\n        require(usdqAmount >= _minUsdq, \\\"QlpManager: insufficient USDQ output\\\");\\n\\n        uint256 mintAmount = aumInUsdq == 0 ? usdqAmount : usdqAmount.mul(qlpSupply).div(aumInUsdq);\\n        require(mintAmount >= _minQlp, \\\"QlpManager: insufficient QLP output\\\");\\n\\n        IMintable(qlp).mint(_account, mintAmount);\\n\\n        lastAddedAt[_account] = block.timestamp;\\n\\n        emit AddLiquidity(_account, _token, _amount, aumInUsdq, qlpSupply, usdqAmount, mintAmount);\\n\\n        return mintAmount;\\n    }\\n\\n    function _removeLiquidity(address _account, address _tokenOut, uint256 _qlpAmount, uint256 _minOut, address _receiver) private returns (uint256) {\\n        require(_qlpAmount > 0, \\\"QlpManager: invalid _qlpAmount\\\");\\n        require(lastAddedAt[_account].add(cooldownDuration) <= block.timestamp, \\\"QlpManager: cooldown duration not yet passed\\\");\\n\\n        // calculate aum before sellUSDQ\\n        uint256 aumInUsdq = getAumInUsdq(false);\\n        uint256 qlpSupply = IERC20(qlp).totalSupply();\\n\\n        uint256 usdqAmount = _qlpAmount.mul(aumInUsdq).div(qlpSupply);\\n        uint256 usdqBalance = IERC20(usdq).balanceOf(address(this));\\n        if (usdqAmount > usdqBalance) {\\n            IUSDQ(usdq).mint(address(this), usdqAmount.sub(usdqBalance));\\n        }\\n\\n        IMintable(qlp).burn(_account, _qlpAmount);\\n\\n        IERC20(usdq).transfer(address(vault), usdqAmount);\\n        uint256 amountOut = vault.sellUSDQ(_tokenOut, _receiver);\\n        require(amountOut >= _minOut, \\\"QlpManager: insufficient output\\\");\\n\\n        emit RemoveLiquidity(_account, _tokenOut, _qlpAmount, aumInUsdq, qlpSupply, usdqAmount, amountOut);\\n\\n        return amountOut;\\n    }\\n\\n    function _validateHandler() private view {\\n        require(isHandler[msg.sender], \\\"QlpManager: forbidden\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x193c2ff1a166a9a2c17483c5debffd5326bf320f41ec068b80ecf25728efda33\",\"license\":\"MIT\"},\"contracts/core/interfaces/IQlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IQlpManager {\\n    function qlp() external view returns (address);\\n    function usdq() external view returns (address);\\n    function vault() external view returns (IVault);\\n    function cooldownDuration() external returns (uint256);\\n    function getAumInUsdq(bool maximise) external view returns (uint256);\\n    function lastAddedAt(address _account) external returns (uint256);\\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdq, uint256 _minQlp) external returns (uint256);\\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdq, uint256 _minQlp) external returns (uint256);\\n    function removeLiquidity(address _tokenOut, uint256 _qlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _qlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external;\\n    function setCooldownDuration(uint256 _cooldownDuration) external;\\n}\\n\",\"keccak256\":\"0x48d5bc101d1e066fe995de838aa0da7508076a239f4d55a4ebd2bfc600fac042\",\"license\":\"MIT\"},\"contracts/core/interfaces/IShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function getNextGlobalShortData(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _nextPrice,\\n        uint256 _sizeDelta,\\n        bool _isIncrease\\n    ) external view returns (uint256, uint256);\\n    function updateGlobalShortData(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta,\\n        uint256 _markPrice,\\n        bool _isIncrease\\n    ) external;\\n    function setIsGlobalShortDataReady(bool value) external;\\n    function setInitData(address[] calldata _tokens, uint256[] calldata _averagePrices) external;\\n}\\n\",\"keccak256\":\"0x7b3f7791cba4f3ccfa308a9bf176663e9cead74bf78ac1c7ae9f2a041a26075d\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdq() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdqAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdqAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdqAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDQ(address _token, address _receiver) external returns (uint256);\\n    function sellUSDQ(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdqDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdqAmounts(address _token) external view returns (uint256);\\n    function maxUsdqAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdqAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\",\"keccak256\":\"0x124deed2f8116a6773a3e25e103eda74110edbb6ab941b64be935b03e01a5fd9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdqFeeBasisPoints(address _token, uint256 _usdqAmount) external view returns (uint256);\\n    function getSellUsdqFeeBasisPoints(address _token, uint256 _usdqAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdqAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdqDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc4d115bc0224bece2aa06b0a8cb7d3d927a108e1c0b306f83a2ed128946f2c8b\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x52455e4835fa0f6e8846c56fcd18484b8012049f38b2f465f4374d9316d557a5\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2179c12e4ac50e8a769b1b43f43558f42bf511fcd7236e034c13c6e4450dbe85\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0ac6523715fd08440082ed1ab1db37b7b5a009f9948c29ce1e63d17171e1ba6\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x223b08d372e9f820805da8b8cbc742bf4c0b7e9fdd1cab8165006ba570ce0b52\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb1174808dcd4195a8fadf042f9e8e3808ae61842af7ed29b3ec059a206c7f1fe\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IUSDQ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUSDQ {\\n    function addVault(address _vault) external;\\n\\n    function removeVault(address _vault) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x51bd4f778dba66d3a159ea244bd2bf32ecb58005cbb6ac6f7e930ae1cd6bc458\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612636380380612636833981810160405260a081101561003357600080fd5b5080516020820151604083015160608401516080909401516001600081905580546001600160a01b031990811633908117821617909155600280546001600160a01b039687169083161790556004805494861694821694909417909355600580549285169284169290921790915560038054939094169290911691909117909155600655612570806100c66000396000f3fe608060405234801561001057600080fd5b50600436106101965760003560e01c8063033914761461019b578063070eacee146101cc578063126082cf146101e857806312d43a51146101f057806317eb2a1514610214578063196b68cb1461025c5780631e9049cf146102645780631ece366a1461026c5780632384b395146102a457806335269315146102ac578063440d828a146102b457806346ea87af146102da5780634bc798f8146103005780634f5f6b5e1461030857806351c5e4d814610327578063566231851461034657806364e6617f1461034e578063657bc5d0146103565780636a86da191461035e57806371d597ad1461037d5780638b770e11146103c15780638fed0b2c146103e75780639116c4ae1461042157806395082d2514610444578063966be0751461044c5780639cb7de4b14610469578063a1acd3d514610497578063b172bb0c146104e2578063cfad57a2146104ea578063d34ee09314610510578063e245b5af14610536578063e26aaefa14610555578063ed0d1c041461055d578063fbfa77cf146105b5575b600080fd5b6101ba600480360360208110156101b157600080fd5b503515156105bd565b60408051918252519081900360200190f35b6101d4610c3b565b604080519115158252519081900360200190f35b6101ba610c44565b6101f8610c4a565b604080516001600160a01b039092168252519081900360200190f35b6101ba600480360360c081101561022a57600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a00135610c59565b6101ba610ccc565b6101ba610cd2565b6101ba6004803603608081101561028257600080fd5b506001600160a01b038135169060208101359060408101359060600135610cd9565b6101ba610d88565b6101ba610d94565b6101ba600480360360208110156102ca57600080fd5b50356001600160a01b0316610d9a565b6101d4600480360360208110156102f057600080fd5b50356001600160a01b03166110ab565b6101ba6110c0565b6103256004803603602081101561031e57600080fd5b50356110c5565b005b6101ba6004803603602081101561033d57600080fd5b5035151561116d565b6101f86111a4565b6101ba6111b3565b6101f86111b9565b6103256004803603602081101561037457600080fd5b503515156111c8565b6101ba600480360360a081101561039357600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516611228565b6101ba600480360360208110156103d757600080fd5b50356001600160a01b0316611299565b6101ba600480360360808110156103fd57600080fd5b506001600160a01b03813581169160208101359160408201359160600135166112ab565b6103256004803603604081101561043757600080fd5b508035906020013561134b565b6101ba6113a3565b6103256004803603602081101561046257600080fd5b50356113b3565b6103256004803603604081101561047f57600080fd5b506001600160a01b0381351690602001351515611447565b6104c9600480360360608110156104ad57600080fd5b506001600160a01b0381351690602081013590604001356114bf565b6040805192835290151560208301528051918290030190f35b6101ba611513565b6103256004803603602081101561050057600080fd5b50356001600160a01b0316611519565b6103256004803603602081101561052657600080fd5b50356001600160a01b0316611588565b6101ba6004803603602081101561054c57600080fd5b503515156115f7565b6101f86116a1565b6105656116b0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105a1578181015183820152602001610589565b505050509050019250505060405180910390f35b6101f861171e565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b815260040160206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d602081101561063857600080fd5b5051600854600254919250906000906001600160a01b0316815b84811015610bf45760025460408051630e468baf60e41b81526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d60208110156106d057600080fd5b505160025460408051630daf9c2160e41b81526001600160a01b0380851660048301529151939450600093919092169163daf9c210916024808301926020929190829003018186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d602081101561074f57600080fd5b505190508061075f575050610bec565b6000896107e457846001600160a01b03166381a612d6846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d60208110156107dd57600080fd5b505161085e565b846001600160a01b031663e124e6d2846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561083157600080fd5b505afa158015610845573d6000803e3d6000fd5b505050506040513d602081101561085b57600080fd5b50515b90506000856001600160a01b03166352f55eed856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108af57600080fd5b505afa1580156108c3573d6000803e3d6000fd5b505050506040513d60208110156108d957600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038781166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d602081101561095557600080fd5b5051604080516342b60b0360e01b81526001600160a01b0388811660048301529151929350908916916342b60b0391602480820192602092909190829003018186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d60208110156109ce57600080fd5b5051156109fe576109f76109f0600a83900a6109ea858761172d565b9061178f565b8a906117ce565b9850610be6565b6000876001600160a01b0316638a78daa8876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a4d57600080fd5b505afa158015610a61573d6000803e3d6000fd5b505050506040513d6020811015610a7757600080fd5b505190508015610ab957600080610a8f8887856114bf565b9150915080610aa957610aa28c836117ce565b9b50610ab6565b610ab38b836117ce565b9a505b50505b610b3c886001600160a01b031663f07456ce886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b50518b906117ce565b99506000886001600160a01b031663c3c7b9e9886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d6020811015610bb757600080fd5b50519050610be1610bda600a85900a6109ea88610bd48987611826565b9061172d565b8c906117ce565b9a5050505b50505050505b600101610652565b50828211610c0b57610c068383611826565b610c0e565b60005b92508260095411610c2c57600954610c27908490611826565b610c2f565b60005b9450505050505b919050565b600a5460ff1681565b61271081565b6001546001600160a01b031681565b600060026000541415610ca1576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610cae611868565b610cbc8787878787876118c6565b6001600055979650505050505050565b60085481565b6202a30081565b600060026000541415610d21576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055600a5460ff1615610d6c576040805162461bcd60e51b815260206004820152601e60248201526000805160206124ee833981519152604482015290519081900360640190fd5b610d7a3333878787876118c6565b600160005595945050505050565b670de0b6b3a764000081565b60065481565b6003546000906001600160a01b0316801580610e185750806001600160a01b0316639a11178f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dea57600080fd5b505afa158015610dfe573d6000803e3d6000fd5b505050506040513d6020811015610e1457600080fd5b5051155b15610e9f5760025460408051636274980360e01b81526001600160a01b038681166004830152915191909216916362749803916024808301926020929190829003018186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d6020811015610e9457600080fd5b50519150610c369050565b600b5480610f2a5760025460408051636274980360e01b81526001600160a01b038781166004830152915191909216916362749803916024808301926020929190829003018186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d6020811015610f1e57600080fd5b50519250610c36915050565b612710811415610f8157816001600160a01b03166362749803856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ef457600080fd5b60025460408051636274980360e01b81526001600160a01b03878116600483015291516000939290921691636274980391602480820192602092909190829003018186803b158015610fd257600080fd5b505afa158015610fe6573d6000803e3d6000fd5b505050506040513d6020811015610ffc57600080fd5b505160408051636274980360e01b81526001600160a01b038881166004830152915192935060009291861691636274980391602480820192602092909190829003018186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d602081101561107857600080fd5b50519050610c2f6127106109ea61108f848761172d565b6110a561109e61271089611826565b879061172d565b906117ce565b600c6020526000908152604090205460ff1681565b601281565b6001546001600160a01b03163314611112576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b612710600b541115611168576040805162461bcd60e51b815260206004820152601a602482015279145b1c13585b9859d95c8e881a5b9d985b1a59081dd95a59da1d60321b604482015290519081900360640190fd5b600b55565b600080611179836105bd565b905061119d68327cb2734119d3b7a9601e1b6109ea83670de0b6b3a764000061172d565b9392505050565b6004546001600160a01b031681565b600b5481565b6003546001600160a01b031681565b6001546001600160a01b03163314611215576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600a805460ff1916911515919091179055565b600060026000541415611270576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b600260005561127d611868565b61128a8686868686611bdf565b60016000559695505050505050565b60076020526000908152604090205481565b6000600260005414156112f3576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055600a5460ff161561133e576040805162461bcd60e51b815260206004820152601e60248201526000805160206124ee833981519152604482015290519081900360640190fd5b610d7a3386868686611bdf565b6001546001600160a01b03163314611398576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600891909155600955565b68327cb2734119d3b7a9601e1b81565b6001546001600160a01b03163314611400576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b6202a3008111156114425760405162461bcd60e51b81526004018080602001828103825260258152602001806124856025913960400191505060405180910390fd5b600655565b6001546001600160a01b03163314611494576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b60008060006114cd86610d9a565b905060008582116114e7576114e28683611826565b6114f1565b6114f18287611826565b90506000611503836109ea888561172d565b9450505084109050935093915050565b60095481565b6001546001600160a01b03163314611566576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146115d5576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080611603836105bd565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165557600080fd5b505afa158015611669573d6000803e3d6000fd5b505050506040513d602081101561167f57600080fd5b50519050611699816109ea84670de0b6b3a764000061172d565b949350505050565b6005546001600160a01b031681565b6040805160028082526060808301845292839291906020830190803683370190505090506116de60016105bd565b816000815181106116eb57fe5b60200260200101818152505061170160006105bd565b8160018151811061170e57fe5b6020908102919091010152905090565b6002546001600160a01b031681565b60008261173c57506000611789565b8282028284828161174957fe5b04146117865760405162461bcd60e51b81526004018080602001828103825260218152602001806124cd6021913960400191505060405180910390fd5b90505b92915050565b600061178683836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061207c565b600082820183811015611786576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600061178683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061211e565b336000908152600c602052604090205460ff166118c4576040805162461bcd60e51b815260206004820152601560248201527428b63826b0b730b3b2b91d103337b93134b23232b760591b604482015290519081900360640190fd5b565b600080841161191a576040805162461bcd60e51b815260206004820152601b60248201527a145b1c13585b9859d95c8e881a5b9d985b1a590817d85b5bdd5b9d602a1b604482015290519081900360640190fd5b6000611926600161116d565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561197857600080fd5b505afa15801561198c573d6000803e3d6000fd5b505050506040513d60208110156119a257600080fd5b50516002549091506119c3906001600160a01b03898116918c911689612178565b6002546040805163b733497760e01b81526001600160a01b038a811660048301523060248301529151600093929092169163b73349779160448082019260209290919082900301818787803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d6020811015611a4557600080fd5b5051905085811015611a885760405162461bcd60e51b81526004018080602001828103825260248152602001806124416024913960400191505060405180910390fd5b60008315611aa357611a9e846109ea848661172d565b611aa5565b815b905085811015611ae65760405162461bcd60e51b81526004018080602001828103825260238152602001806124aa6023913960400191505060405180910390fd5b600554604080516340c10f1960e01b81526001600160a01b038d8116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b5050506001600160a01b03808c166000818152600760209081526040918290204290558151928352928d16928201929092528082018b9052606081018790526080810186905260a0810185905260c0810184905290517f38dc38b96482be64113daffd8d464ebda93e856b70ccfc605e69ccf892ab981e92509081900360e00190a19a9950505050505050505050565b6000808411611c35576040805162461bcd60e51b815260206004820152601e60248201527f516c704d616e616765723a20696e76616c6964205f716c70416d6f756e740000604482015290519081900360640190fd5b6006546001600160a01b0387166000908152600760205260409020544291611c5d91906117ce565b1115611c9a5760405162461bcd60e51b815260040180806020018281038252602c81526020018061250e602c913960400191505060405180910390fd5b6000611ca6600061116d565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf857600080fd5b505afa158015611d0c573d6000803e3d6000fd5b505050506040513d6020811015611d2257600080fd5b505190506000611d36826109ea898661172d565b60048054604080516370a0823160e01b81523093810193909352519293506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611d8857600080fd5b505afa158015611d9c573d6000803e3d6000fd5b505050506040513d6020811015611db257600080fd5b5051905080821115611e39576004546001600160a01b03166340c10f1930611dda8585611826565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611e2057600080fd5b505af1158015611e34573d6000803e3d6000fd5b505050505b60055460408051632770a7eb60e21b81526001600160a01b038d81166004830152602482018c905291519190921691639dc29fac91604480830192600092919082900301818387803b158015611e8e57600080fd5b505af1158015611ea2573d6000803e3d6000fd5b5050600480546002546040805163a9059cbb60e01b81526001600160a01b039283169481019490945260248401889052519116935063a9059cbb925060448083019260209291908290030181600087803b158015611eff57600080fd5b505af1158015611f13573d6000803e3d6000fd5b505050506040513d6020811015611f2957600080fd5b50506002546040805163058cd2db60e51b81526001600160a01b038c8116600483015289811660248301529151600093929092169163b19a5b609160448082019260209290919082900301818787803b158015611f8557600080fd5b505af1158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b5051905087811015612008576040805162461bcd60e51b815260206004820152601f60248201527f516c704d616e616765723a20696e73756666696369656e74206f757470757400604482015290519081900360640190fd5b604080516001600160a01b03808e1682528c1660208201528082018b9052606081018790526080810186905260a0810185905260c0810183905290517f87b9679bb9a4944bafa98c267e7cd4a00ab29fed48afdefae25f0fca5da279409181900360e00190a19a9950505050505050505050565b600081836121085760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120cd5781810151838201526020016120b5565b50505050905090810190601f1680156120fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161211457fe5b0495945050505050565b600081848411156121705760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156120cd5781810151838201526020016120b5565b505050900390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526121d29085906121d8565b50505050565b606061222d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661228e9092919063ffffffff16565b8051909150156122895780806020019051602081101561224c57600080fd5b50516122895760405162461bcd60e51b815260040180806020018281038252602a81526020018061253a602a913960400191505060405180910390fd5b505050565b60606116998484600085856122a2856123b4565b6122f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123325780518252601f199092019160209182019101612313565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612394576040519150601f19603f3d011682016040523d82523d6000602084013e612399565b606091505b50915091506123a98282866123ba565b979650505050505050565b3b151590565b606083156123c957508161119d565b8251156123d95782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156120cd5781810151838201526020016120b556fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00516c704d616e616765723a20696e73756666696369656e742055534451206f7574707574476f7665726e61626c653a20666f7262696464656e0000000000000000000000516c704d616e616765723a20696e76616c6964205f636f6f6c646f776e4475726174696f6e516c704d616e616765723a20696e73756666696369656e7420514c50206f7574707574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77516c704d616e616765723a20616374696f6e206e6f7420656e61626c65640000516c704d616e616765723a20636f6f6c646f776e206475726174696f6e206e6f7420796574207061737365645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101965760003560e01c8063033914761461019b578063070eacee146101cc578063126082cf146101e857806312d43a51146101f057806317eb2a1514610214578063196b68cb1461025c5780631e9049cf146102645780631ece366a1461026c5780632384b395146102a457806335269315146102ac578063440d828a146102b457806346ea87af146102da5780634bc798f8146103005780634f5f6b5e1461030857806351c5e4d814610327578063566231851461034657806364e6617f1461034e578063657bc5d0146103565780636a86da191461035e57806371d597ad1461037d5780638b770e11146103c15780638fed0b2c146103e75780639116c4ae1461042157806395082d2514610444578063966be0751461044c5780639cb7de4b14610469578063a1acd3d514610497578063b172bb0c146104e2578063cfad57a2146104ea578063d34ee09314610510578063e245b5af14610536578063e26aaefa14610555578063ed0d1c041461055d578063fbfa77cf146105b5575b600080fd5b6101ba600480360360208110156101b157600080fd5b503515156105bd565b60408051918252519081900360200190f35b6101d4610c3b565b604080519115158252519081900360200190f35b6101ba610c44565b6101f8610c4a565b604080516001600160a01b039092168252519081900360200190f35b6101ba600480360360c081101561022a57600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a00135610c59565b6101ba610ccc565b6101ba610cd2565b6101ba6004803603608081101561028257600080fd5b506001600160a01b038135169060208101359060408101359060600135610cd9565b6101ba610d88565b6101ba610d94565b6101ba600480360360208110156102ca57600080fd5b50356001600160a01b0316610d9a565b6101d4600480360360208110156102f057600080fd5b50356001600160a01b03166110ab565b6101ba6110c0565b6103256004803603602081101561031e57600080fd5b50356110c5565b005b6101ba6004803603602081101561033d57600080fd5b5035151561116d565b6101f86111a4565b6101ba6111b3565b6101f86111b9565b6103256004803603602081101561037457600080fd5b503515156111c8565b6101ba600480360360a081101561039357600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516611228565b6101ba600480360360208110156103d757600080fd5b50356001600160a01b0316611299565b6101ba600480360360808110156103fd57600080fd5b506001600160a01b03813581169160208101359160408201359160600135166112ab565b6103256004803603604081101561043757600080fd5b508035906020013561134b565b6101ba6113a3565b6103256004803603602081101561046257600080fd5b50356113b3565b6103256004803603604081101561047f57600080fd5b506001600160a01b0381351690602001351515611447565b6104c9600480360360608110156104ad57600080fd5b506001600160a01b0381351690602081013590604001356114bf565b6040805192835290151560208301528051918290030190f35b6101ba611513565b6103256004803603602081101561050057600080fd5b50356001600160a01b0316611519565b6103256004803603602081101561052657600080fd5b50356001600160a01b0316611588565b6101ba6004803603602081101561054c57600080fd5b503515156115f7565b6101f86116a1565b6105656116b0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105a1578181015183820152602001610589565b505050509050019250505060405180910390f35b6101f861171e565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b815260040160206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d602081101561063857600080fd5b5051600854600254919250906000906001600160a01b0316815b84811015610bf45760025460408051630e468baf60e41b81526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d60208110156106d057600080fd5b505160025460408051630daf9c2160e41b81526001600160a01b0380851660048301529151939450600093919092169163daf9c210916024808301926020929190829003018186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d602081101561074f57600080fd5b505190508061075f575050610bec565b6000896107e457846001600160a01b03166381a612d6846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d60208110156107dd57600080fd5b505161085e565b846001600160a01b031663e124e6d2846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561083157600080fd5b505afa158015610845573d6000803e3d6000fd5b505050506040513d602081101561085b57600080fd5b50515b90506000856001600160a01b03166352f55eed856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108af57600080fd5b505afa1580156108c3573d6000803e3d6000fd5b505050506040513d60208110156108d957600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038781166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d602081101561095557600080fd5b5051604080516342b60b0360e01b81526001600160a01b0388811660048301529151929350908916916342b60b0391602480820192602092909190829003018186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d60208110156109ce57600080fd5b5051156109fe576109f76109f0600a83900a6109ea858761172d565b9061178f565b8a906117ce565b9850610be6565b6000876001600160a01b0316638a78daa8876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a4d57600080fd5b505afa158015610a61573d6000803e3d6000fd5b505050506040513d6020811015610a7757600080fd5b505190508015610ab957600080610a8f8887856114bf565b9150915080610aa957610aa28c836117ce565b9b50610ab6565b610ab38b836117ce565b9a505b50505b610b3c886001600160a01b031663f07456ce886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b50518b906117ce565b99506000886001600160a01b031663c3c7b9e9886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d6020811015610bb757600080fd5b50519050610be1610bda600a85900a6109ea88610bd48987611826565b9061172d565b8c906117ce565b9a5050505b50505050505b600101610652565b50828211610c0b57610c068383611826565b610c0e565b60005b92508260095411610c2c57600954610c27908490611826565b610c2f565b60005b9450505050505b919050565b600a5460ff1681565b61271081565b6001546001600160a01b031681565b600060026000541415610ca1576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055610cae611868565b610cbc8787878787876118c6565b6001600055979650505050505050565b60085481565b6202a30081565b600060026000541415610d21576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055600a5460ff1615610d6c576040805162461bcd60e51b815260206004820152601e60248201526000805160206124ee833981519152604482015290519081900360640190fd5b610d7a3333878787876118c6565b600160005595945050505050565b670de0b6b3a764000081565b60065481565b6003546000906001600160a01b0316801580610e185750806001600160a01b0316639a11178f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dea57600080fd5b505afa158015610dfe573d6000803e3d6000fd5b505050506040513d6020811015610e1457600080fd5b5051155b15610e9f5760025460408051636274980360e01b81526001600160a01b038681166004830152915191909216916362749803916024808301926020929190829003018186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d6020811015610e9457600080fd5b50519150610c369050565b600b5480610f2a5760025460408051636274980360e01b81526001600160a01b038781166004830152915191909216916362749803916024808301926020929190829003018186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d6020811015610f1e57600080fd5b50519250610c36915050565b612710811415610f8157816001600160a01b03166362749803856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ef457600080fd5b60025460408051636274980360e01b81526001600160a01b03878116600483015291516000939290921691636274980391602480820192602092909190829003018186803b158015610fd257600080fd5b505afa158015610fe6573d6000803e3d6000fd5b505050506040513d6020811015610ffc57600080fd5b505160408051636274980360e01b81526001600160a01b038881166004830152915192935060009291861691636274980391602480820192602092909190829003018186803b15801561104e57600080fd5b505afa158015611062573d6000803e3d6000fd5b505050506040513d602081101561107857600080fd5b50519050610c2f6127106109ea61108f848761172d565b6110a561109e61271089611826565b879061172d565b906117ce565b600c6020526000908152604090205460ff1681565b601281565b6001546001600160a01b03163314611112576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b612710600b541115611168576040805162461bcd60e51b815260206004820152601a602482015279145b1c13585b9859d95c8e881a5b9d985b1a59081dd95a59da1d60321b604482015290519081900360640190fd5b600b55565b600080611179836105bd565b905061119d68327cb2734119d3b7a9601e1b6109ea83670de0b6b3a764000061172d565b9392505050565b6004546001600160a01b031681565b600b5481565b6003546001600160a01b031681565b6001546001600160a01b03163314611215576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600a805460ff1916911515919091179055565b600060026000541415611270576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b600260005561127d611868565b61128a8686868686611bdf565b60016000559695505050505050565b60076020526000908152604090205481565b6000600260005414156112f3576040805162461bcd60e51b815260206004820152601f6024820152600080516020612421833981519152604482015290519081900360640190fd5b6002600055600a5460ff161561133e576040805162461bcd60e51b815260206004820152601e60248201526000805160206124ee833981519152604482015290519081900360640190fd5b610d7a3386868686611bdf565b6001546001600160a01b03163314611398576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600891909155600955565b68327cb2734119d3b7a9601e1b81565b6001546001600160a01b03163314611400576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b6202a3008111156114425760405162461bcd60e51b81526004018080602001828103825260258152602001806124856025913960400191505060405180910390fd5b600655565b6001546001600160a01b03163314611494576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b60008060006114cd86610d9a565b905060008582116114e7576114e28683611826565b6114f1565b6114f18287611826565b90506000611503836109ea888561172d565b9450505084109050935093915050565b60095481565b6001546001600160a01b03163314611566576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146115d5576040805162461bcd60e51b81526020600482015260156024820152600080516020612465833981519152604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080611603836105bd565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165557600080fd5b505afa158015611669573d6000803e3d6000fd5b505050506040513d602081101561167f57600080fd5b50519050611699816109ea84670de0b6b3a764000061172d565b949350505050565b6005546001600160a01b031681565b6040805160028082526060808301845292839291906020830190803683370190505090506116de60016105bd565b816000815181106116eb57fe5b60200260200101818152505061170160006105bd565b8160018151811061170e57fe5b6020908102919091010152905090565b6002546001600160a01b031681565b60008261173c57506000611789565b8282028284828161174957fe5b04146117865760405162461bcd60e51b81526004018080602001828103825260218152602001806124cd6021913960400191505060405180910390fd5b90505b92915050565b600061178683836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061207c565b600082820183811015611786576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600061178683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061211e565b336000908152600c602052604090205460ff166118c4576040805162461bcd60e51b815260206004820152601560248201527428b63826b0b730b3b2b91d103337b93134b23232b760591b604482015290519081900360640190fd5b565b600080841161191a576040805162461bcd60e51b815260206004820152601b60248201527a145b1c13585b9859d95c8e881a5b9d985b1a590817d85b5bdd5b9d602a1b604482015290519081900360640190fd5b6000611926600161116d565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561197857600080fd5b505afa15801561198c573d6000803e3d6000fd5b505050506040513d60208110156119a257600080fd5b50516002549091506119c3906001600160a01b03898116918c911689612178565b6002546040805163b733497760e01b81526001600160a01b038a811660048301523060248301529151600093929092169163b73349779160448082019260209290919082900301818787803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d6020811015611a4557600080fd5b5051905085811015611a885760405162461bcd60e51b81526004018080602001828103825260248152602001806124416024913960400191505060405180910390fd5b60008315611aa357611a9e846109ea848661172d565b611aa5565b815b905085811015611ae65760405162461bcd60e51b81526004018080602001828103825260238152602001806124aa6023913960400191505060405180910390fd5b600554604080516340c10f1960e01b81526001600160a01b038d8116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b5050506001600160a01b03808c166000818152600760209081526040918290204290558151928352928d16928201929092528082018b9052606081018790526080810186905260a0810185905260c0810184905290517f38dc38b96482be64113daffd8d464ebda93e856b70ccfc605e69ccf892ab981e92509081900360e00190a19a9950505050505050505050565b6000808411611c35576040805162461bcd60e51b815260206004820152601e60248201527f516c704d616e616765723a20696e76616c6964205f716c70416d6f756e740000604482015290519081900360640190fd5b6006546001600160a01b0387166000908152600760205260409020544291611c5d91906117ce565b1115611c9a5760405162461bcd60e51b815260040180806020018281038252602c81526020018061250e602c913960400191505060405180910390fd5b6000611ca6600061116d565b90506000600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf857600080fd5b505afa158015611d0c573d6000803e3d6000fd5b505050506040513d6020811015611d2257600080fd5b505190506000611d36826109ea898661172d565b60048054604080516370a0823160e01b81523093810193909352519293506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611d8857600080fd5b505afa158015611d9c573d6000803e3d6000fd5b505050506040513d6020811015611db257600080fd5b5051905080821115611e39576004546001600160a01b03166340c10f1930611dda8585611826565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611e2057600080fd5b505af1158015611e34573d6000803e3d6000fd5b505050505b60055460408051632770a7eb60e21b81526001600160a01b038d81166004830152602482018c905291519190921691639dc29fac91604480830192600092919082900301818387803b158015611e8e57600080fd5b505af1158015611ea2573d6000803e3d6000fd5b5050600480546002546040805163a9059cbb60e01b81526001600160a01b039283169481019490945260248401889052519116935063a9059cbb925060448083019260209291908290030181600087803b158015611eff57600080fd5b505af1158015611f13573d6000803e3d6000fd5b505050506040513d6020811015611f2957600080fd5b50506002546040805163058cd2db60e51b81526001600160a01b038c8116600483015289811660248301529151600093929092169163b19a5b609160448082019260209290919082900301818787803b158015611f8557600080fd5b505af1158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b5051905087811015612008576040805162461bcd60e51b815260206004820152601f60248201527f516c704d616e616765723a20696e73756666696369656e74206f757470757400604482015290519081900360640190fd5b604080516001600160a01b03808e1682528c1660208201528082018b9052606081018790526080810186905260a0810185905260c0810183905290517f87b9679bb9a4944bafa98c267e7cd4a00ab29fed48afdefae25f0fca5da279409181900360e00190a19a9950505050505050505050565b600081836121085760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120cd5781810151838201526020016120b5565b50505050905090810190601f1680156120fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161211457fe5b0495945050505050565b600081848411156121705760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156120cd5781810151838201526020016120b5565b505050900390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526121d29085906121d8565b50505050565b606061222d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661228e9092919063ffffffff16565b8051909150156122895780806020019051602081101561224c57600080fd5b50516122895760405162461bcd60e51b815260040180806020018281038252602a81526020018061253a602a913960400191505060405180910390fd5b505050565b60606116998484600085856122a2856123b4565b6122f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123325780518252601f199092019160209182019101612313565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612394576040519150601f19603f3d011682016040523d82523d6000602084013e612399565b606091505b50915091506123a98282866123ba565b979650505050505050565b3b151590565b606083156123c957508161119d565b8251156123d95782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156120cd5781810151838201526020016120b556fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00516c704d616e616765723a20696e73756666696369656e742055534451206f7574707574476f7665726e61626c653a20666f7262696464656e0000000000000000000000516c704d616e616765723a20696e76616c6964205f636f6f6c646f776e4475726174696f6e516c704d616e616765723a20696e73756666696369656e7420514c50206f7574707574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77516c704d616e616765723a20616374696f6e206e6f7420656e61626c65640000516c704d616e616765723a20636f6f6c646f776e206475726174696f6e206e6f7420796574207061737365645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23787,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9136,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVault)19623"
      },
      {
        "astId": 9138,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "shortsTracker",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IShortsTracker)18987"
      },
      {
        "astId": 9141,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "usdq",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9144,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "qlp",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9147,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "cooldownDuration",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9152,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "lastAddedAt",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9154,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "aumAddition",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9156,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "aumDeduction",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9158,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "inPrivateMode",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 9160,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "shortsTrackerAveragePriceWeight",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9164,
        "contract": "contracts/core/QlpManager.sol:QlpManager",
        "label": "isHandler",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IShortsTracker)18987": {
        "encoding": "inplace",
        "label": "contract IShortsTracker",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)19623": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}