{
   "abi": [
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSITION_PROPS_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDQ_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdqAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFullVaultTokenInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getFundingRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getMaxAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_collateralTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_indexTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isLong",
          "type": "bool[]"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_yieldTrackers",
          "type": "address[]"
        }
      ],
      "name": "getStakingInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getTokenBalancesWithSupplies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_excludedAccounts",
          "type": "address[]"
        }
      ],
      "name": "getTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_yieldTokens",
          "type": "address[]"
        }
      ],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdqAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getVaultTokenInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdqAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getVaultTokenInfoV2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_vesters",
          "type": "address[]"
        }
      ],
      "name": "getVestingInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMaxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasMaxGlobalShortSizes",
          "type": "bool"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x35ee3815007628b9c14f4b97cb6e9cc799196dd4cbed07ec3251f962b3660d7e",
  "receipt": {
    "to": null,
    "from": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",
    "contractAddress": "0x8BaA4d31B46a272b5a90F192Dcf20348E1845719",
    "transactionIndex": 0,
    "gasUsed": "5051899",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x66f5672295f0ed2330d0b4689890851caf0195bbec0ab4f3f01a7ac13dea81bc",
    "transactionHash": "0x35ee3815007628b9c14f4b97cb6e9cc799196dd4cbed07ec3251f962b3660d7e",
    "logs": [],
    "blockNumber": 28381655,
    "cumulativeGasUsed": "5051899",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7eed24cc682f6cf62416705b24f9c628",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_PROPS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDQ_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdqAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFullVaultTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getFundingRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getMaxAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_collateralTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_indexTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isLong\",\"type\":\"bool[]\"}],\"name\":\"getPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_yieldTrackers\",\"type\":\"address[]\"}],\"name\":\"getStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalancesWithSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_excludedAccounts\",\"type\":\"address[]\"}],\"name\":\"getTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_yieldTokens\",\"type\":\"address[]\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdqAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getVaultTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdqAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getVaultTokenInfoV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_vesters\",\"type\":\"address[]\"}],\"name\":\"getVestingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMaxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasMaxGlobalShortSizes\",\"type\":\"bool\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripherals/Reader.sol\":\"Reader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IPancakeFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPancakeFactory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0xeec3b2720323f1b7e73f5fcf36e9f68e3ac5171d763f5f15b5fa1f9d704cf2a4\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdq() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function getTargetUsdqAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setUsdqAmount(address _token, uint256 _amount) external;\\n\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdqAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDQ(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDQ(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdqDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdqAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdqAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdqAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xc247c3dc87351e3bdc8dc14694ca7ee035b9e52ccfd7abcfe0f6e59f1d1598e0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n\\n    function setAdjustment(\\n        address _token,\\n        bool _isAdditive,\\n        uint256 _adjustmentBps\\n    ) external;\\n\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice,\\n        bool _useSwapPricing\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n\\n    function getPrimaryPrice(address _token, bool _maximise)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcbbd18f389e0f7445399135315b4a7f5e8c5c9f5502fbd1d8747906f4f8f8ee6\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken,\\n        address _indexToken\\n    ) external returns (bool);\\n\\n    function validateIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external view;\\n\\n    function validateDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external view;\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    ) external view returns (uint256, uint256);\\n\\n    function getEntryFundingRate(\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) external view returns (uint256);\\n\\n    function getPositionFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getFundingFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdqFeeBasisPoints(address _token, uint256 _usdqAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSellUsdqFeeBasisPoints(address _token, uint256 _usdqAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _usdqAmount\\n    ) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdqDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xafc12294f1c958c02e178106e3db33710a7f4c904f8ef5f1549ceba151427509\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x52455e4835fa0f6e8846c56fcd18484b8012049f38b2f465f4374d9316d557a5\",\"license\":\"MIT\"},\"contracts/peripherals/Reader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldTracker.sol\\\";\\nimport \\\"../tokens/interfaces/IYieldToken.sol\\\";\\nimport \\\"../amm/interfaces/IPancakeFactory.sol\\\";\\n\\nimport \\\"../staking/interfaces/IVester.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract Reader is Governable {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant POSITION_PROPS_LENGTH = 9;\\n    uint256 public constant PRICE_PRECISION = 10**30;\\n    uint256 public constant USDQ_DECIMALS = 18;\\n\\n    bool public hasMaxGlobalShortSizes;\\n\\n    function setConfig(bool _hasMaxGlobalShortSizes) public onlyGov {\\n        hasMaxGlobalShortSizes = _hasMaxGlobalShortSizes;\\n    }\\n\\n    function getMaxAmountIn(\\n        IVault _vault,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) public view returns (uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 priceOut = _vault.getMaxPrice(_tokenOut);\\n\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 tokenOutDecimals = _vault.tokenDecimals(_tokenOut);\\n\\n        uint256 amountIn;\\n\\n        {\\n            uint256 poolAmount = _vault.poolAmounts(_tokenOut);\\n            uint256 reservedAmount = _vault.reservedAmounts(_tokenOut);\\n            uint256 bufferAmount = _vault.bufferAmounts(_tokenOut);\\n            uint256 subAmount = reservedAmount > bufferAmount ? reservedAmount : bufferAmount;\\n            if (subAmount >= poolAmount) {\\n                return 0;\\n            }\\n            uint256 availableAmount = poolAmount.sub(subAmount);\\n            amountIn = availableAmount.mul(priceOut).div(priceIn).mul(10**tokenInDecimals).div(10**tokenOutDecimals);\\n        }\\n\\n        uint256 maxUsdqAmount = _vault.maxUsdqAmounts(_tokenIn);\\n\\n        if (maxUsdqAmount != 0) {\\n            if (maxUsdqAmount < _vault.usdqAmounts(_tokenIn)) {\\n                return 0;\\n            }\\n\\n            uint256 maxAmountIn = maxUsdqAmount.sub(_vault.usdqAmounts(_tokenIn));\\n            maxAmountIn = maxAmountIn.mul(10**tokenInDecimals).div(10**USDQ_DECIMALS);\\n            maxAmountIn = maxAmountIn.mul(PRICE_PRECISION).div(priceIn);\\n\\n            if (amountIn > maxAmountIn) {\\n                return maxAmountIn;\\n            }\\n        }\\n\\n        return amountIn;\\n    }\\n\\n    function getAmountOut(\\n        IVault _vault,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) public view returns (uint256, uint256) {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n        uint256 tokenOutDecimals = _vault.tokenDecimals(_tokenOut);\\n\\n        uint256 feeBasisPoints;\\n        {\\n            uint256 usdqAmount = _amountIn.mul(priceIn).div(PRICE_PRECISION);\\n            usdqAmount = usdqAmount.mul(10**USDQ_DECIMALS).div(10**tokenInDecimals);\\n\\n            bool isStableSwap = _vault.stableTokens(_tokenIn) && _vault.stableTokens(_tokenOut);\\n            uint256 baseBps = isStableSwap ? _vault.stableSwapFeeBasisPoints() : _vault.swapFeeBasisPoints();\\n            uint256 taxBps = isStableSwap ? _vault.stableTaxBasisPoints() : _vault.taxBasisPoints();\\n            uint256 feesBasisPoints0 = _vault.getFeeBasisPoints(_tokenIn, usdqAmount, baseBps, taxBps, true);\\n            uint256 feesBasisPoints1 = _vault.getFeeBasisPoints(_tokenOut, usdqAmount, baseBps, taxBps, false);\\n            // use the higher of the two fee basis points\\n            feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n        }\\n\\n        uint256 priceOut = _vault.getMaxPrice(_tokenOut);\\n        uint256 amountOut = _amountIn.mul(priceIn).div(priceOut);\\n        amountOut = amountOut.mul(10**tokenOutDecimals).div(10**tokenInDecimals);\\n\\n        uint256 amountOutAfterFees = amountOut.mul(BASIS_POINTS_DIVISOR.sub(feeBasisPoints)).div(BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = amountOut.sub(amountOutAfterFees);\\n\\n        return (amountOutAfterFees, feeAmount);\\n    }\\n\\n    function getFeeBasisPoints(\\n        IVault _vault,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 priceIn = _vault.getMinPrice(_tokenIn);\\n        uint256 tokenInDecimals = _vault.tokenDecimals(_tokenIn);\\n\\n        uint256 usdqAmount = _amountIn.mul(priceIn).div(PRICE_PRECISION);\\n        usdqAmount = usdqAmount.mul(10**USDQ_DECIMALS).div(10**tokenInDecimals);\\n\\n        bool isStableSwap = _vault.stableTokens(_tokenIn) && _vault.stableTokens(_tokenOut);\\n        uint256 baseBps = isStableSwap ? _vault.stableSwapFeeBasisPoints() : _vault.swapFeeBasisPoints();\\n        uint256 taxBps = isStableSwap ? _vault.stableTaxBasisPoints() : _vault.taxBasisPoints();\\n        uint256 feesBasisPoints0 = _vault.getFeeBasisPoints(_tokenIn, usdqAmount, baseBps, taxBps, true);\\n        uint256 feesBasisPoints1 = _vault.getFeeBasisPoints(_tokenOut, usdqAmount, baseBps, taxBps, false);\\n        // use the higher of the two fee basis points\\n        uint256 feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n\\n        return (feeBasisPoints, feesBasisPoints0, feesBasisPoints1);\\n    }\\n\\n    function getFees(address _vault, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            amounts[i] = IVault(_vault).feeReserves(_tokens[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    function getTotalStaked(address[] memory _yieldTokens) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_yieldTokens.length);\\n        for (uint256 i = 0; i < _yieldTokens.length; i++) {\\n            IYieldToken yieldToken = IYieldToken(_yieldTokens[i]);\\n            amounts[i] = yieldToken.totalStaked();\\n        }\\n        return amounts;\\n    }\\n\\n    function getStakingInfo(address _account, address[] memory _yieldTrackers) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[](_yieldTrackers.length * propsLength);\\n        for (uint256 i = 0; i < _yieldTrackers.length; i++) {\\n            IYieldTracker yieldTracker = IYieldTracker(_yieldTrackers[i]);\\n            amounts[i * propsLength] = yieldTracker.claimable(_account);\\n            amounts[i * propsLength + 1] = yieldTracker.getTokensPerInterval();\\n        }\\n        return amounts;\\n    }\\n\\n    function getVestingInfo(address _account, address[] memory _vesters) public view returns (uint256[] memory) {\\n        uint256 propsLength = 7;\\n        uint256[] memory amounts = new uint256[](_vesters.length * propsLength);\\n        for (uint256 i = 0; i < _vesters.length; i++) {\\n            IVester vester = IVester(_vesters[i]);\\n            amounts[i * propsLength] = vester.pairAmounts(_account);\\n            amounts[i * propsLength + 1] = vester.getVestedAmount(_account);\\n            amounts[i * propsLength + 2] = IERC20(_vesters[i]).balanceOf(_account);\\n            amounts[i * propsLength + 3] = vester.claimedAmounts(_account);\\n            amounts[i * propsLength + 4] = vester.claimable(_account);\\n            amounts[i * propsLength + 5] = vester.getMaxVestableAmount(_account);\\n            amounts[i * propsLength + 6] = vester.getCombinedAverageStakedAmount(_account);\\n        }\\n        return amounts;\\n    }\\n\\n    function getPairInfo(address _factory, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 inputLength = 2;\\n        uint256 propsLength = 2;\\n        uint256[] memory amounts = new uint256[]((_tokens.length / inputLength) * propsLength);\\n        for (uint256 i = 0; i < _tokens.length / inputLength; i++) {\\n            address token0 = _tokens[i * inputLength];\\n            address token1 = _tokens[i * inputLength + 1];\\n            address pair = IPancakeFactory(_factory).getPair(token0, token1);\\n\\n            amounts[i * propsLength] = IERC20(token0).balanceOf(pair);\\n            amounts[i * propsLength + 1] = IERC20(token1).balanceOf(pair);\\n        }\\n        return amounts;\\n    }\\n\\n    function getFundingRates(\\n        address _vault,\\n        address _weth,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory fundingRates = new uint256[](_tokens.length * propsLength);\\n        IVault vault = IVault(_vault);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            uint256 fundingRateFactor = vault.stableTokens(token) ? vault.stableFundingRateFactor() : vault.fundingRateFactor();\\n            uint256 reservedAmount = vault.reservedAmounts(token);\\n            uint256 poolAmount = vault.poolAmounts(token);\\n\\n            if (poolAmount > 0) {\\n                fundingRates[i * propsLength] = fundingRateFactor.mul(reservedAmount).div(poolAmount);\\n            }\\n\\n            if (vault.cumulativeFundingRates(token) > 0) {\\n                uint256 nextRate = vault.getNextFundingRate(token);\\n                uint256 baseRate = vault.cumulativeFundingRates(token);\\n                fundingRates[i * propsLength + 1] = baseRate.add(nextRate);\\n            }\\n        }\\n\\n        return fundingRates;\\n    }\\n\\n    function getTokenSupply(IERC20 _token, address[] memory _excludedAccounts) public view returns (uint256) {\\n        uint256 supply = _token.totalSupply();\\n        for (uint256 i = 0; i < _excludedAccounts.length; i++) {\\n            address account = _excludedAccounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            supply = supply.sub(balance);\\n        }\\n        return supply;\\n    }\\n\\n    function getTotalBalance(IERC20 _token, address[] memory _accounts) public view returns (uint256) {\\n        uint256 totalBalance = 0;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            address account = _accounts[i];\\n            uint256 balance = _token.balanceOf(account);\\n            totalBalance = totalBalance.add(balance);\\n        }\\n        return totalBalance;\\n    }\\n\\n    function getTokenBalances(address _account, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256[] memory balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i] = _account.balance;\\n                continue;\\n            }\\n            balances[i] = IERC20(token).balanceOf(_account);\\n        }\\n        return balances;\\n    }\\n\\n    function getTokenBalancesWithSupplies(address _account, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 2;\\n        uint256[] memory balances = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                balances[i * propsLength] = _account.balance;\\n                balances[i * propsLength + 1] = 0;\\n                continue;\\n            }\\n            balances[i * propsLength] = IERC20(token).balanceOf(_account);\\n            balances[i * propsLength + 1] = IERC20(token).totalSupply();\\n        }\\n        return balances;\\n    }\\n\\n    function getPrices(IVaultPriceFeed _priceFeed, address[] memory _tokens) public view returns (uint256[] memory) {\\n        uint256 propsLength = 6;\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            amounts[i * propsLength] = _priceFeed.getPrice(token, true, true, false);\\n            amounts[i * propsLength + 1] = _priceFeed.getPrice(token, false, true, false);\\n            amounts[i * propsLength + 2] = _priceFeed.getPrimaryPrice(token, true);\\n            amounts[i * propsLength + 3] = _priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 4] = _priceFeed.isAdjustmentAdditive(token) ? 1 : 0;\\n            amounts[i * propsLength + 5] = _priceFeed.adjustmentBasisPoints(token);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getVaultTokenInfo(\\n        address _vault,\\n        address _weth,\\n        uint256 _usdqAmount,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 10;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdqAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdqAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 6] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 7] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 8] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 9] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getFullVaultTokenInfo(\\n        address _vault,\\n        address _weth,\\n        uint256 _usdqAmount,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 12;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdqAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdqAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdqAmounts(token);\\n            amounts[i * propsLength + 7] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 8] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 9] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 10] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 11] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getVaultTokenInfoV2(\\n        address _vault,\\n        address _weth,\\n        uint256 _usdqAmount,\\n        address[] memory _tokens\\n    ) public view returns (uint256[] memory) {\\n        uint256 propsLength = 14;\\n\\n        IVault vault = IVault(_vault);\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        uint256[] memory amounts = new uint256[](_tokens.length * propsLength);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (token == address(0)) {\\n                token = _weth;\\n            }\\n\\n            uint256 maxGlobalShortSize = hasMaxGlobalShortSizes ? vault.maxGlobalShortSizes(token) : 0;\\n            amounts[i * propsLength] = vault.poolAmounts(token);\\n            amounts[i * propsLength + 1] = vault.reservedAmounts(token);\\n            amounts[i * propsLength + 2] = vault.usdqAmounts(token);\\n            amounts[i * propsLength + 3] = vault.getRedemptionAmount(token, _usdqAmount);\\n            amounts[i * propsLength + 4] = vault.tokenWeights(token);\\n            amounts[i * propsLength + 5] = vault.bufferAmounts(token);\\n            amounts[i * propsLength + 6] = vault.maxUsdqAmounts(token);\\n            amounts[i * propsLength + 7] = vault.globalShortSizes(token);\\n            amounts[i * propsLength + 8] = maxGlobalShortSize;\\n            amounts[i * propsLength + 9] = vault.getMinPrice(token);\\n            amounts[i * propsLength + 10] = vault.getMaxPrice(token);\\n            amounts[i * propsLength + 11] = vault.guaranteedUsd(token);\\n            amounts[i * propsLength + 12] = priceFeed.getPrimaryPrice(token, false);\\n            amounts[i * propsLength + 13] = priceFeed.getPrimaryPrice(token, true);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function getPositions(\\n        address _vault,\\n        address _account,\\n        address[] memory _collateralTokens,\\n        address[] memory _indexTokens,\\n        bool[] memory _isLong\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](_collateralTokens.length * POSITION_PROPS_LENGTH);\\n\\n        for (uint256 i = 0; i < _collateralTokens.length; i++) {\\n            {\\n                (\\n                    uint256 size,\\n                    uint256 collateral,\\n                    uint256 averagePrice,\\n                    uint256 entryFundingRate,\\n                    ,\\n                    /* reserveAmount */\\n                    uint256 realisedPnl,\\n                    bool hasRealisedProfit,\\n                    uint256 lastIncreasedTime\\n                ) = IVault(_vault).getPosition(_account, _collateralTokens[i], _indexTokens[i], _isLong[i]);\\n\\n                amounts[i * POSITION_PROPS_LENGTH] = size;\\n                amounts[i * POSITION_PROPS_LENGTH + 1] = collateral;\\n                amounts[i * POSITION_PROPS_LENGTH + 2] = averagePrice;\\n                amounts[i * POSITION_PROPS_LENGTH + 3] = entryFundingRate;\\n                amounts[i * POSITION_PROPS_LENGTH + 4] = hasRealisedProfit ? 1 : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 5] = realisedPnl;\\n                amounts[i * POSITION_PROPS_LENGTH + 6] = lastIncreasedTime;\\n            }\\n\\n            uint256 size = amounts[i * POSITION_PROPS_LENGTH];\\n            uint256 averagePrice = amounts[i * POSITION_PROPS_LENGTH + 2];\\n            uint256 lastIncreasedTime = amounts[i * POSITION_PROPS_LENGTH + 6];\\n            if (averagePrice > 0) {\\n                (bool hasProfit, uint256 delta) = IVault(_vault).getDelta(_indexTokens[i], size, averagePrice, _isLong[i], lastIncreasedTime);\\n                amounts[i * POSITION_PROPS_LENGTH + 7] = hasProfit ? 1 : 0;\\n                amounts[i * POSITION_PROPS_LENGTH + 8] = delta;\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n}\\n\",\"keccak256\":\"0x98882f5b5158ec1ebbea95c718642d71c540c8dab3c8e1174654b0b5a08e0961\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae96cdbfc636a9af965a3805d09626e578845b3e04eb54960c277cda55bc1855\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IYieldToken {\\n    function totalStaked() external view returns (uint256);\\n    function stakedBalance(address _account) external view returns (uint256);\\n    function removeAdmin(address _account) external;\\n}\\n\",\"keccak256\":\"0x42499f6cb2c708252e614e83e085f390c7f25556a1b9be7574f1724cefd989f4\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IYieldTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IYieldTracker {\\n    function claim(address _account, address _receiver) external returns (uint256);\\n    function updateRewards(address _account) external;\\n    function getTokensPerInterval() external view returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe807c9b1c23a5513c4bd8d9774e2b6ddddcad0e9c18f34abbaf2974fa703f012\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055615a0b80620000336000396000f3fe608060405234801561001057600080fd5b506004361061016e5760003560e01c8063937a0be8116100ce578063c6f1d67611610087578063c6f1d67614610b09578063cfad57a214610b25578063d7176ca914610b4b578063d802178e14610ba0578063dc383cab14610c51578063f3535e6c14610e0f578063fbdb05ca14610e475761016e565b8063937a0be8146108bc57806395082d251461096d57806395a7535a146109755780639b0183c314610a2f578063a4543ead14610a50578063ad7e549714610b015761016e565b8063302a81411161012b578063302a8141146104c55780633613d527146104cd578063440f018c1461057e57806348211934146105d85780637b906e931461068957806386d4d0f51461074a5780638e83ca32146107fb5761016e565b8063126082cf1461017357806312d43a511461018d57806320542568146101b15780632413c8c1146102c25780632ac0184c146103635780632e3e334214610414575b600080fd5b61017b610ef8565b60408051918252519081900360200190f35b610195610efe565b604080516001600160a01b039092168252519081900360200190f35b610272600480360360808110156101c757600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460208302840111600160201b8311171561023457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f0d945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ae578181015183820152602001610296565b505050509050019250505060405180910390f35b610272600480360360208110156102d857600080fd5b810190602081018135600160201b8111156102f257600080fd5b82018360208201111561030457600080fd5b803590602001918460208302840111600160201b8311171561032557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061161b945050505050565b61017b6004803603604081101561037957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a357600080fd5b8201836020820111156103b557600080fd5b803590602001918460208302840111600160201b831117156103d657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611714945050505050565b6102726004803603604081101561042a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561045457600080fd5b82018360208201111561046657600080fd5b803590602001918460208302840111600160201b8311171561048757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061183f945050505050565b61017b611a44565b610272600480360360408110156104e357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561050d57600080fd5b82018360208201111561051f57600080fd5b803590602001918460208302840111600160201b8311171561054057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a49945050505050565b6105ba6004803603608081101561059457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611e83565b60408051938452602084019290925282820152519081900360600190f35b610272600480360360408110156105ee57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561061857600080fd5b82018360208201111561062a57600080fd5b803590602001918460208302840111600160201b8311171561064b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506123e8945050505050565b6102726004803603608081101561069f57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106d957600080fd5b8201836020820111156106eb57600080fd5b803590602001918460208302840111600160201b8311171561070c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061289c945050505050565b6102726004803603604081101561076057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561078a57600080fd5b82018360208201111561079c57600080fd5b803590602001918460208302840111600160201b831117156107bd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506130cd945050505050565b6102726004803603608081101561081157600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561084b57600080fd5b82018360208201111561085d57600080fd5b803590602001918460208302840111600160201b8311171561087e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506131cd945050505050565b610272600480360360408110156108d257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108fc57600080fd5b82018360208201111561090e57600080fd5b803590602001918460208302840111600160201b8311171561092f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613b4a945050505050565b61017b613cdf565b6102726004803603606081101561098b57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156109be57600080fd5b8201836020820111156109d057600080fd5b803590602001918460208302840111600160201b831117156109f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613cef945050505050565b610a4e60048036036020811015610a4557600080fd5b503515156141bd565b005b61027260048036036040811015610a6657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610a9057600080fd5b820183602082011115610aa257600080fd5b803590602001918460208302840111600160201b83111715610ac357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614232945050505050565b61017b61449e565b610b116144a3565b604080519115158252519081900360200190f35b610a4e60048036036020811015610b3b57600080fd5b50356001600160a01b03166144b3565b610b8760048036036080811015610b6157600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561452c565b6040805192835260208301919091528051918290030190f35b61027260048036036040811015610bb657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610be057600080fd5b820183602082011115610bf257600080fd5b803590602001918460208302840111600160201b83111715610c1357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614be2945050505050565b610272600480360360a0811015610c6757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115610c9a57600080fd5b820183602082011115610cac57600080fd5b803590602001918460208302840111600160201b83111715610ccd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d1c57600080fd5b820183602082011115610d2e57600080fd5b803590602001918460208302840111600160201b83111715610d4f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d9e57600080fd5b820183602082011115610db057600080fd5b803590602001918460208302840111600160201b83111715610dd157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614d2e945050505050565b61017b60048036036060811015610e2557600080fd5b506001600160a01b03813581169160208101358216916040909101351661512a565b61017b60048036036040811015610e5d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610e8757600080fd5b820183602082011115610e9957600080fd5b803590602001918460208302840111600160201b83111715610eba57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506156f1945050505050565b61271081565b6000546001600160a01b031681565b60606000600a905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5557600080fd5b505afa158015610f69573d6000803e3d6000fd5b505050506040513d6020811015610f7f57600080fd5b5051855190915060609084026001600160401b0381118015610fa057600080fd5b50604051908082528060200260200182016040528015610fca578160200160208202803683370190505b50905060005b865181101561160e576000878281518110610fe757fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561100f5750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d602081101561108657600080fd5b50518351849084890290811061109857fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110f157600080fd5b505afa158015611105573d6000803e3d6000fd5b505050506040513d602081101561111b57600080fd5b5051835184906001858a020190811061113057fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561118957600080fd5b505afa15801561119d573d6000803e3d6000fd5b505050506040513d60208110156111b357600080fd5b5051835184906002858a02019081106111c857fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d602081101561125357600080fd5b5051835184906003858a020190811061126857fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b5051835184906004858a020190811061130057fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b5051835184906005858a020190811061139857fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d602081101561141b57600080fd5b5051835184906006858a020190811061143057fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d60208110156114b357600080fd5b5051835184906007858a02019081106114c857fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d602081101561154c57600080fd5b5051835184906008858a020190811061156157fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b5051835184906009858a02019081106115fa57fe5b602090810291909101015250600101610fd0565b5098975050505050505050565b60608082516001600160401b038111801561163557600080fd5b5060405190808252806020026020018201604052801561165f578160200160208202803683370190505b50905060005b835181101561170d57600084828151811061167c57fe5b60200260200101519050806001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d60208110156116e957600080fd5b505183518490849081106116f957fe5b602090810291909101015250600101611665565b5092915050565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175057600080fd5b505afa158015611764573d6000803e3d6000fd5b505050506040513d602081101561177a57600080fd5b5051905060005b835181101561183557600084828151811061179857fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d602081101561181b57600080fd5b5051905061182984826157aa565b93505050600101611781565b5090505b92915050565b60606000600290506060818451026001600160401b038111801561186257600080fd5b5060405190808252806020026020018201604052801561188c578160200160208202803683370190505b50905060005b8451811015611a3b5760008582815181106118a957fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561191857866001600160a01b03163183858402815181106118e757fe5b6020026020010181815250506000838584026001018151811061190657fe5b60200260200101818152505050611a33565b806001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561196557600080fd5b505afa158015611979573d6000803e3d6000fd5b505050506040513d602081101561198f57600080fd5b5051835184908487029081106119a157fe5b602002602001018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e657600080fd5b505afa1580156119fa573d6000803e3d6000fd5b505050506040513d6020811015611a1057600080fd5b505183518490600185880201908110611a2557fe5b602002602001018181525050505b600101611892565b50949350505050565b601281565b60606000600690506060818451026001600160401b0381118015611a6c57600080fd5b50604051908082528060200260200182016040528015611a96578160200160208202803683370190505b50905060005b8451811015611a3b576000858281518110611ab357fe5b602090810291909101810151604080516317e1d38560e11b81526001600160a01b0380841660048301526001602483018190526044830152600060648301529151929450908a1692632fc3a70a92608480840193829003018186803b158015611b1b57600080fd5b505afa158015611b2f573d6000803e3d6000fd5b505050506040513d6020811015611b4557600080fd5b505183518490848702908110611b5757fe5b602090810291909101810191909152604080516317e1d38560e11b81526001600160a01b0384811660048301526000602483018190526001604484015260648301529151918a1692632fc3a70a92608480840193829003018186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b505183518490600185880201908110611bfe57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918a16926356c8c2c192604480840193829003018186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d6020811015611c8257600080fd5b505183518490600285880201908110611c9757fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918a16926356c8c2c192604480840193829003018186803b158015611cf157600080fd5b505afa158015611d05573d6000803e3d6000fd5b505050506040513d6020811015611d1b57600080fd5b505183518490600385880201908110611d3057fe5b602002602001018181525050866001600160a01b0316636ce8a44b826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d6020811015611db357600080fd5b5051611dc0576000611dc3565b60015b60ff168385840260040181518110611dd757fe5b602002602001018181525050866001600160a01b03166348cac277826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e3057600080fd5b505afa158015611e44573d6000803e3d6000fd5b505050506040513d6020811015611e5a57600080fd5b505183518490600585880201908110611e6f57fe5b602090810291909101015250600101611a9c565b600080600080876001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ed657600080fd5b505afa158015611eea573d6000803e3d6000fd5b505050506040513d6020811015611f0057600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038a811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b158015611f5257600080fd5b505afa158015611f66573d6000803e3d6000fd5b505050506040513d6020811015611f7c57600080fd5b505190506000611fa268327cb2734119d3b7a9601e1b611f9c89866157ec565b90615845565b9050611fbe600a83900a611f9c83670de0b6b3a76400006157ec565b905060008a6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561200f57600080fd5b505afa158015612023573d6000803e3d6000fd5b505050506040513d602081101561203957600080fd5b505180156120bc57508a6001600160a01b03166342b60b038a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561208f57600080fd5b505afa1580156120a3573d6000803e3d6000fd5b505050506040513d60208110156120b957600080fd5b50515b905060008161212f578b6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d602081101561212857600080fd5b5051612195565b8b6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561216857600080fd5b505afa15801561217c573d6000803e3d6000fd5b505050506040513d602081101561219257600080fd5b50515b9050600082612208578c6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d757600080fd5b505afa1580156121eb573d6000803e3d6000fd5b505050506040513d602081101561220157600080fd5b505161226e565b8c6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561224157600080fd5b505afa158015612255573d6000803e3d6000fd5b505050506040513d602081101561226b57600080fd5b50515b905060008d6001600160a01b031663c7e074c38e87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b1580156122e257600080fd5b505afa1580156122f6573d6000803e3d6000fd5b505050506040513d602081101561230c57600080fd5b8101908080519060200190929190505050905060008e6001600160a01b031663c7e074c38e88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b15801561239157600080fd5b505afa1580156123a5573d6000803e3d6000fd5b505050506040513d60208110156123bb57600080fd5b5051905060008183116123ce57816123d0565b825b9b509199509750505050505050509450945094915050565b60606000600790506060818451026001600160401b038111801561240b57600080fd5b50604051908082528060200260200182016040528015612435578160200160208202803683370190505b50905060005b8451811015611a3b57600085828151811061245257fe5b60200260200101519050806001600160a01b0316635d50e729886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124a957600080fd5b505afa1580156124bd573d6000803e3d6000fd5b505050506040513d60208110156124d357600080fd5b5051835184908487029081106124e557fe5b602002602001018181525050806001600160a01b031663d5a73fdd886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d602081101561256857600080fd5b50518351849060018588020190811061257d57fe5b60200260200101818152505085828151811061259557fe5b60200260200101516001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156125e957600080fd5b505afa1580156125fd573d6000803e3d6000fd5b505050506040513d602081101561261357600080fd5b50518351849060028588020190811061262857fe5b602002602001018181525050806001600160a01b03166371417b32886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561268157600080fd5b505afa158015612695573d6000803e3d6000fd5b505050506040513d60208110156126ab57600080fd5b5051835184906003858802019081106126c057fe5b602002602001018181525050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561271957600080fd5b505afa15801561272d573d6000803e3d6000fd5b505050506040513d602081101561274357600080fd5b50518351849060048588020190811061275857fe5b602002602001018181525050806001600160a01b03166308f26c76886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127b157600080fd5b505afa1580156127c5573d6000803e3d6000fd5b505050506040513d60208110156127db57600080fd5b5051835184906005858802019081106127f057fe5b602002602001018181525050806001600160a01b03166345f01ee6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561284957600080fd5b505afa15801561285d573d6000803e3d6000fd5b505050506040513d602081101561287357600080fd5b50518351849060068588020190811061288857fe5b60209081029190910101525060010161243b565b60606000600c905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128e457600080fd5b505afa1580156128f8573d6000803e3d6000fd5b505050506040513d602081101561290e57600080fd5b5051855190915060609084026001600160401b038111801561292f57600080fd5b50604051908082528060200260200182016040528015612959578160200160208202803683370190505b50905060005b865181101561160e57600087828151811061297657fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561299e5750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156129eb57600080fd5b505afa1580156129ff573d6000803e3d6000fd5b505050506040513d6020811015612a1557600080fd5b505183518490848902908110612a2757fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a8057600080fd5b505afa158015612a94573d6000803e3d6000fd5b505050506040513d6020811015612aaa57600080fd5b5051835184906001858a0201908110612abf57fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b5051835184906002858a0201908110612b5757fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d6020811015612be257600080fd5b5051835184906003858a0201908110612bf757fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c5057600080fd5b505afa158015612c64573d6000803e3d6000fd5b505050506040513d6020811015612c7a57600080fd5b5051835184906004858a0201908110612c8f57fe5b602002602001018181525050846001600160a01b0316634a993ee9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d6020811015612d1257600080fd5b5051835184906005858a0201908110612d2757fe5b602002602001018181525050846001600160a01b0316639acc6b33826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d8057600080fd5b505afa158015612d94573d6000803e3d6000fd5b505050506040513d6020811015612daa57600080fd5b5051835184906006858a0201908110612dbf57fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e1857600080fd5b505afa158015612e2c573d6000803e3d6000fd5b505050506040513d6020811015612e4257600080fd5b5051835184906007858a0201908110612e5757fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612eb057600080fd5b505afa158015612ec4573d6000803e3d6000fd5b505050506040513d6020811015612eda57600080fd5b5051835184906008858a0201908110612eef57fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f4857600080fd5b505afa158015612f5c573d6000803e3d6000fd5b505050506040513d6020811015612f7257600080fd5b5051835184906009858a0201908110612f8757fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b158015612fe157600080fd5b505afa158015612ff5573d6000803e3d6000fd5b505050506040513d602081101561300b57600080fd5b505183518490600a858a020190811061302057fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b15801561307a57600080fd5b505afa15801561308e573d6000803e3d6000fd5b505050506040513d60208110156130a457600080fd5b505183518490600b858a02019081106130b957fe5b60209081029190910101525060010161295f565b60608082516001600160401b03811180156130e757600080fd5b50604051908082528060200260200182016040528015613111578160200160208202803683370190505b50905060005b835181101561183557846001600160a01b0316631ce9cb8f85838151811061313b57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561318057600080fd5b505afa158015613194573d6000803e3d6000fd5b505050506040513d60208110156131aa57600080fd5b505182518390839081106131ba57fe5b6020908102919091010152600101613117565b60606000600e905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561321557600080fd5b505afa158015613229573d6000803e3d6000fd5b505050506040513d602081101561323f57600080fd5b5051855190915060609084026001600160401b038111801561326057600080fd5b5060405190808252806020026020018201604052801561328a578160200160208202803683370190505b50905060005b865181101561160e5760008782815181106132a757fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156132cf5750885b60008054600160a01b900460ff166132e8576000613362565b856001600160a01b0316639698d25a836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561333557600080fd5b505afa158015613349573d6000803e3d6000fd5b505050506040513d602081101561335f57600080fd5b50515b9050856001600160a01b03166352f55eed836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133b157600080fd5b505afa1580156133c5573d6000803e3d6000fd5b505050506040513d60208110156133db57600080fd5b505184518590858a029081106133ed57fe5b602002602001018181525050856001600160a01b031663c3c7b9e9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561344657600080fd5b505afa15801561345a573d6000803e3d6000fd5b505050506040513d602081101561347057600080fd5b5051845185906001868b020190811061348557fe5b602002602001018181525050856001600160a01b03166383867b2d836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134de57600080fd5b505afa1580156134f2573d6000803e3d6000fd5b505050506040513d602081101561350857600080fd5b5051845185906002868b020190811061351d57fe5b602002602001018181525050856001600160a01b0316632c668ec1838c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561357e57600080fd5b505afa158015613592573d6000803e3d6000fd5b505050506040513d60208110156135a857600080fd5b5051845185906003868b02019081106135bd57fe5b602002602001018181525050856001600160a01b031663ab2f3ad4836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561361657600080fd5b505afa15801561362a573d6000803e3d6000fd5b505050506040513d602081101561364057600080fd5b5051845185906004868b020190811061365557fe5b602002602001018181525050856001600160a01b0316634a993ee9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156136ae57600080fd5b505afa1580156136c2573d6000803e3d6000fd5b505050506040513d60208110156136d857600080fd5b5051845185906005868b02019081106136ed57fe5b602002602001018181525050856001600160a01b0316639acc6b33836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561374657600080fd5b505afa15801561375a573d6000803e3d6000fd5b505050506040513d602081101561377057600080fd5b5051845185906006868b020190811061378557fe5b602002602001018181525050856001600160a01b0316638a78daa8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156137de57600080fd5b505afa1580156137f2573d6000803e3d6000fd5b505050506040513d602081101561380857600080fd5b5051845185906007868b020190811061381d57fe5b60200260200101818152505080848885026008018151811061383b57fe5b602002602001018181525050856001600160a01b03166381a612d6836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561389457600080fd5b505afa1580156138a8573d6000803e3d6000fd5b505050506040513d60208110156138be57600080fd5b5051845185906009868b02019081106138d357fe5b602002602001018181525050856001600160a01b031663e124e6d2836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561392c57600080fd5b505afa158015613940573d6000803e3d6000fd5b505050506040513d602081101561395657600080fd5b505184518590600a868b020190811061396b57fe5b602002602001018181525050856001600160a01b031663f07456ce836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156139c457600080fd5b505afa1580156139d8573d6000803e3d6000fd5b505050506040513d60208110156139ee57600080fd5b505184518590600b868b0201908110613a0357fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600060248301529151918816926356c8c2c192604480840193829003018186803b158015613a5d57600080fd5b505afa158015613a71573d6000803e3d6000fd5b505050506040513d6020811015613a8757600080fd5b505184518590600c868b0201908110613a9c57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600160248301529151918816926356c8c2c192604480840193829003018186803b158015613af657600080fd5b505afa158015613b0a573d6000803e3d6000fd5b505050506040513d6020811015613b2057600080fd5b505184518590600d868b0201908110613b3557fe5b60209081029190910101525050600101613290565b60606000600290506060818451026001600160401b0381118015613b6d57600080fd5b50604051908082528060200260200182016040528015613b97578160200160208202803683370190505b50905060005b8451811015611a3b576000858281518110613bb457fe5b60200260200101519050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613c0b57600080fd5b505afa158015613c1f573d6000803e3d6000fd5b505050506040513d6020811015613c3557600080fd5b505183518490848702908110613c4757fe5b602002602001018181525050806001600160a01b0316632459f51d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c8c57600080fd5b505afa158015613ca0573d6000803e3d6000fd5b505050506040513d6020811015613cb657600080fd5b505183518490600185880201908110613ccb57fe5b602090810291909101015250600101613b9d565b68327cb2734119d3b7a9601e1b81565b60606000600290506060818451026001600160401b0381118015613d1257600080fd5b50604051908082528060200260200182016040528015613d3c578160200160208202803683370190505b5090508560005b85518110156141af576000868281518110613d5a57fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415613d825750865b6000836001600160a01b03166342b60b03836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613dd157600080fd5b505afa158015613de5573d6000803e3d6000fd5b505050506040513d6020811015613dfb57600080fd5b5051613e6b57836001600160a01b031663c4f718bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3a57600080fd5b505afa158015613e4e573d6000803e3d6000fd5b505050506040513d6020811015613e6457600080fd5b5051613ed1565b836001600160a01b031663134ca63b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ea457600080fd5b505afa158015613eb8573d6000803e3d6000fd5b505050506040513d6020811015613ece57600080fd5b50515b90506000846001600160a01b031663c3c7b9e9846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613f2257600080fd5b505afa158015613f36573d6000803e3d6000fd5b505050506040513d6020811015613f4c57600080fd5b5051604080516352f55eed60e01b81526001600160a01b0386811660048301529151929350600092918816916352f55eed91602480820192602092909190829003018186803b158015613f9e57600080fd5b505afa158015613fb2573d6000803e3d6000fd5b505050506040513d6020811015613fc857600080fd5b505190508015613ffb57613fe081611f9c85856157ec565b8789870281518110613fee57fe5b6020026020010181815250505b6000866001600160a01b031663c65bc7b1866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561404a57600080fd5b505afa15801561405e573d6000803e3d6000fd5b505050506040513d602081101561407457600080fd5b5051111561419f576000866001600160a01b031663a93acac2866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156140cb57600080fd5b505afa1580156140df573d6000803e3d6000fd5b505050506040513d60208110156140f557600080fd5b50516040805163c65bc7b160e01b81526001600160a01b0388811660048301529151929350600092918a169163c65bc7b191602480820192602092909190829003018186803b15801561414757600080fd5b505afa15801561415b573d6000803e3d6000fd5b505050506040513d602081101561417157600080fd5b5051905061417f8183615887565b898b89026001018151811061419057fe5b60200260200101818152505050505b505060019092019150613d439050565b5090925050505b9392505050565b6000546001600160a01b03163314614214576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b60008054911515600160a01b0260ff60a01b19909216919091179055565b80516060906002908190839082900482026001600160401b038111801561425857600080fd5b50604051908082528060200260200182016040528015614282578160200160208202803683370190505b50905060005b8386518161429257fe5b0481101561449457600086858302815181106142aa57fe5b60200260200101519050600087868402600101815181106142c757fe5b602002602001015190506000896001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561433157600080fd5b505afa158015614345573d6000803e3d6000fd5b505050506040513d602081101561435b57600080fd5b5051604080516370a0823160e01b81526001600160a01b0380841660048301529151929350908516916370a0823191602480820192602092909190829003018186803b1580156143aa57600080fd5b505afa1580156143be573d6000803e3d6000fd5b505050506040513d60208110156143d457600080fd5b5051855186908689029081106143e657fe5b602002602001018181525050816001600160a01b03166370a08231826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561443f57600080fd5b505afa158015614453573d6000803e3d6000fd5b505050506040513d602081101561446957600080fd5b5051855186906001878a020190811061447e57fe5b6020908102919091010152505050600101614288565b5095945050505050565b600981565b600054600160a01b900460ff1681565b6000546001600160a01b0316331461450a576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000866001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561457e57600080fd5b505afa158015614592573d6000803e3d6000fd5b505050506040513d60208110156145a857600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156145fa57600080fd5b505afa15801561460e573d6000803e3d6000fd5b505050506040513d602081101561462457600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b15801561467657600080fd5b505afa15801561468a573d6000803e3d6000fd5b505050506040513d60208110156146a057600080fd5b505190506000806146c168327cb2734119d3b7a9601e1b611f9c8a886157ec565b90506146dd600a85900a611f9c83670de0b6b3a76400006157ec565b905060008b6001600160a01b03166342b60b038c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561472e57600080fd5b505afa158015614742573d6000803e3d6000fd5b505050506040513d602081101561475857600080fd5b505180156147db57508b6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156147ae57600080fd5b505afa1580156147c2573d6000803e3d6000fd5b505050506040513d60208110156147d857600080fd5b50515b905060008161484e578c6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b15801561481d57600080fd5b505afa158015614831573d6000803e3d6000fd5b505050506040513d602081101561484757600080fd5b50516148b4565b8c6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561488757600080fd5b505afa15801561489b573d6000803e3d6000fd5b505050506040513d60208110156148b157600080fd5b50515b9050600082614927578d6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156148f657600080fd5b505afa15801561490a573d6000803e3d6000fd5b505050506040513d602081101561492057600080fd5b505161498d565b8d6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561496057600080fd5b505afa158015614974573d6000803e3d6000fd5b505050506040513d602081101561498a57600080fd5b50515b905060008e6001600160a01b031663c7e074c38f87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614a0157600080fd5b505afa158015614a15573d6000803e3d6000fd5b505050506040513d6020811015614a2b57600080fd5b8101908080519060200190929190505050905060008f6001600160a01b031663c7e074c38f88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614ab057600080fd5b505afa158015614ac4573d6000803e3d6000fd5b505050506040513d6020811015614ada57600080fd5b50519050808211614aeb5780614aed565b815b965050505050505060008a6001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614b4457600080fd5b505afa158015614b58573d6000803e3d6000fd5b505050506040513d6020811015614b6e57600080fd5b505190506000614b8282611f9c8b896157ec565b9050614ba185600a0a611f9c86600a0a846157ec90919063ffffffff16565b90506000614bbf612710611f9c614bb882886157aa565b85906157ec565b90506000614bcd83836157aa565b919e919d50909b505050505050505050505050565b60608082516001600160401b0381118015614bfc57600080fd5b50604051908082528060200260200182016040528015614c26578160200160208202803683370190505b50905060005b8351811015611835576000848281518110614c4357fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415614c9157856001600160a01b031631838381518110614c7f57fe5b60200260200101818152505050614d26565b806001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614cde57600080fd5b505afa158015614cf2573d6000803e3d6000fd5b505050506040513d6020811015614d0857600080fd5b50518351849084908110614d1857fe5b602002602001018181525050505b600101614c2c565b60608060098551026001600160401b0381118015614d4b57600080fd5b50604051908082528060200260200182016040528015614d75578160200160208202803683370190505b50905060005b855181101561511f5760008060008060008060008e6001600160a01b0316634a3f088d8f8f8b81518110614dab57fe5b60200260200101518f8c81518110614dbf57fe5b60200260200101518f8d81518110614dd357fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815260200182151581526020019450505050506101006040518083038186803b158015614e4257600080fd5b505afa158015614e56573d6000803e3d6000fd5b505050506040513d610100811015614e6d57600080fd5b50805160208201516040830151606084015160a085015160c086015160e0909601518f51959d50939b509199509750955091935090915087908a9060098b02908110614eb557fe5b602002602001018181525050858960098a0260010181518110614ed457fe5b602002602001018181525050848960098a0260020181518110614ef357fe5b602002602001018181525050838960098a0260030181518110614f1257fe5b60200260200101818152505081614f2a576000614f2d565b60015b60ff168960098a0260040181518110614f4257fe5b602002602001018181525050828960098a0260050181518110614f6157fe5b602002602001018181525050808960098a0260060181518110614f8057fe5b602002602001018181525050505050505050506000826009830281518110614fa457fe5b602002602001015190506000836009840260020181518110614fc257fe5b602002602001015190506000846009850260060181518110614fe057fe5b602002602001015190506000821115615114576000808c6001600160a01b0316635c07eaab8b888151811061501157fe5b602002602001015187878d8b8151811061502757fe5b6020026020010151886040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001831515815260200182815260200195505050505050604080518083038186803b15801561508a57600080fd5b505afa15801561509e573d6000803e3d6000fd5b505050506040513d60408110156150b457600080fd5b5080516020909101519092509050816150ce5760006150d1565b60015b60ff168760098802600701815181106150e657fe5b6020026020010181815250508087600988026008018151811061510557fe5b60200260200101818152505050505b505050600101614d7b565b509695505050505050565b600080846001600160a01b03166381a612d6856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561517a57600080fd5b505afa15801561518e573d6000803e3d6000fd5b505050506040513d60208110156151a457600080fd5b505160408051637092736960e11b81526001600160a01b03868116600483015291519293506000929188169163e124e6d291602480820192602092909190829003018186803b1580156151f657600080fd5b505afa15801561520a573d6000803e3d6000fd5b505050506040513d602081101561522057600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038881166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561527257600080fd5b505afa158015615286573d6000803e3d6000fd5b505050506040513d602081101561529c57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0388811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156152ee57600080fd5b505afa158015615302573d6000803e3d6000fd5b505050506040513d602081101561531857600080fd5b5051604080516352f55eed60e01b81526001600160a01b038981166004830152915192935060009283928c16916352f55eed916024808301926020929190829003018186803b15801561536a57600080fd5b505afa15801561537e573d6000803e3d6000fd5b505050506040513d602081101561539457600080fd5b50516040805163c3c7b9e960e01b81526001600160a01b038b811660048301529151929350600092918d169163c3c7b9e991602480820192602092909190829003018186803b1580156153e657600080fd5b505afa1580156153fa573d6000803e3d6000fd5b505050506040513d602081101561541057600080fd5b505160408051634a993ee960e01b81526001600160a01b038c811660048301529151929350600092918e1691634a993ee991602480820192602092909190829003018186803b15801561546257600080fd5b505afa158015615476573d6000803e3d6000fd5b505050506040513d602081101561548c57600080fd5b50519050600081831161549f57816154a1565b825b90508381106154bc57600099505050505050505050506141b6565b60006154c885836157aa565b90506154f587600a0a611f9c8a600a0a6154ef8e611f9c8f886157ec90919063ffffffff16565b906157ec565b955050505050506000896001600160a01b0316639acc6b338a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561554b57600080fd5b505afa15801561555f573d6000803e3d6000fd5b505050506040513d602081101561557557600080fd5b50519050801561160e57896001600160a01b03166383867b2d8a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156155cc57600080fd5b505afa1580156155e0573d6000803e3d6000fd5b505050506040513d60208110156155f657600080fd5b505181101561560e57600096505050505050506141b6565b60006156938b6001600160a01b03166383867b2d8c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561566057600080fd5b505afa158015615674573d6000803e3d6000fd5b505050506040513d602081101561568a57600080fd5b505183906157aa565b90506156af670de0b6b3a7640000611f9c83600a89900a6157ec565b90506156cb87611f9c8368327cb2734119d3b7a9601e1b6157ec565b9050808311156156e35796506141b695505050505050565b505098975050505050505050565b600080805b835181101561183557600084828151811061570d57fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561576657600080fd5b505afa15801561577a573d6000803e3d6000fd5b505050506040513d602081101561579057600080fd5b5051905061579e8482615887565b935050506001016156f6565b60006141b683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506158e1565b6000826157fb57506000611839565b8282028284828161580857fe5b04146141b65760405162461bcd60e51b81526004018080602001828103825260218152602001806159de6021913960400191505060405180910390fd5b60006141b683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615978565b6000828201838110156141b6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156159705760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561593557818101518382015260200161591d565b50505050905090810190601f1680156159625780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836159c75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561593557818101518382015260200161591d565b5060008385816159d357fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016e5760003560e01c8063937a0be8116100ce578063c6f1d67611610087578063c6f1d67614610b09578063cfad57a214610b25578063d7176ca914610b4b578063d802178e14610ba0578063dc383cab14610c51578063f3535e6c14610e0f578063fbdb05ca14610e475761016e565b8063937a0be8146108bc57806395082d251461096d57806395a7535a146109755780639b0183c314610a2f578063a4543ead14610a50578063ad7e549714610b015761016e565b8063302a81411161012b578063302a8141146104c55780633613d527146104cd578063440f018c1461057e57806348211934146105d85780637b906e931461068957806386d4d0f51461074a5780638e83ca32146107fb5761016e565b8063126082cf1461017357806312d43a511461018d57806320542568146101b15780632413c8c1146102c25780632ac0184c146103635780632e3e334214610414575b600080fd5b61017b610ef8565b60408051918252519081900360200190f35b610195610efe565b604080516001600160a01b039092168252519081900360200190f35b610272600480360360808110156101c757600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561020157600080fd5b82018360208201111561021357600080fd5b803590602001918460208302840111600160201b8311171561023457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f0d945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ae578181015183820152602001610296565b505050509050019250505060405180910390f35b610272600480360360208110156102d857600080fd5b810190602081018135600160201b8111156102f257600080fd5b82018360208201111561030457600080fd5b803590602001918460208302840111600160201b8311171561032557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061161b945050505050565b61017b6004803603604081101561037957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a357600080fd5b8201836020820111156103b557600080fd5b803590602001918460208302840111600160201b831117156103d657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611714945050505050565b6102726004803603604081101561042a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561045457600080fd5b82018360208201111561046657600080fd5b803590602001918460208302840111600160201b8311171561048757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061183f945050505050565b61017b611a44565b610272600480360360408110156104e357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561050d57600080fd5b82018360208201111561051f57600080fd5b803590602001918460208302840111600160201b8311171561054057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611a49945050505050565b6105ba6004803603608081101561059457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611e83565b60408051938452602084019290925282820152519081900360600190f35b610272600480360360408110156105ee57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561061857600080fd5b82018360208201111561062a57600080fd5b803590602001918460208302840111600160201b8311171561064b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506123e8945050505050565b6102726004803603608081101561069f57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156106d957600080fd5b8201836020820111156106eb57600080fd5b803590602001918460208302840111600160201b8311171561070c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061289c945050505050565b6102726004803603604081101561076057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561078a57600080fd5b82018360208201111561079c57600080fd5b803590602001918460208302840111600160201b831117156107bd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506130cd945050505050565b6102726004803603608081101561081157600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561084b57600080fd5b82018360208201111561085d57600080fd5b803590602001918460208302840111600160201b8311171561087e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506131cd945050505050565b610272600480360360408110156108d257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108fc57600080fd5b82018360208201111561090e57600080fd5b803590602001918460208302840111600160201b8311171561092f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613b4a945050505050565b61017b613cdf565b6102726004803603606081101561098b57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156109be57600080fd5b8201836020820111156109d057600080fd5b803590602001918460208302840111600160201b831117156109f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613cef945050505050565b610a4e60048036036020811015610a4557600080fd5b503515156141bd565b005b61027260048036036040811015610a6657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610a9057600080fd5b820183602082011115610aa257600080fd5b803590602001918460208302840111600160201b83111715610ac357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614232945050505050565b61017b61449e565b610b116144a3565b604080519115158252519081900360200190f35b610a4e60048036036020811015610b3b57600080fd5b50356001600160a01b03166144b3565b610b8760048036036080811015610b6157600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561452c565b6040805192835260208301919091528051918290030190f35b61027260048036036040811015610bb657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610be057600080fd5b820183602082011115610bf257600080fd5b803590602001918460208302840111600160201b83111715610c1357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614be2945050505050565b610272600480360360a0811015610c6757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b811115610c9a57600080fd5b820183602082011115610cac57600080fd5b803590602001918460208302840111600160201b83111715610ccd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d1c57600080fd5b820183602082011115610d2e57600080fd5b803590602001918460208302840111600160201b83111715610d4f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610d9e57600080fd5b820183602082011115610db057600080fd5b803590602001918460208302840111600160201b83111715610dd157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550614d2e945050505050565b61017b60048036036060811015610e2557600080fd5b506001600160a01b03813581169160208101358216916040909101351661512a565b61017b60048036036040811015610e5d57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610e8757600080fd5b820183602082011115610e9957600080fd5b803590602001918460208302840111600160201b83111715610eba57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506156f1945050505050565b61271081565b6000546001600160a01b031681565b60606000600a905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5557600080fd5b505afa158015610f69573d6000803e3d6000fd5b505050506040513d6020811015610f7f57600080fd5b5051855190915060609084026001600160401b0381118015610fa057600080fd5b50604051908082528060200260200182016040528015610fca578160200160208202803683370190505b50905060005b865181101561160e576000878281518110610fe757fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561100f5750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d602081101561108657600080fd5b50518351849084890290811061109857fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110f157600080fd5b505afa158015611105573d6000803e3d6000fd5b505050506040513d602081101561111b57600080fd5b5051835184906001858a020190811061113057fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561118957600080fd5b505afa15801561119d573d6000803e3d6000fd5b505050506040513d60208110156111b357600080fd5b5051835184906002858a02019081106111c857fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d602081101561125357600080fd5b5051835184906003858a020190811061126857fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b5051835184906004858a020190811061130057fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b5051835184906005858a020190811061139857fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d602081101561141b57600080fd5b5051835184906006858a020190811061143057fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d60208110156114b357600080fd5b5051835184906007858a02019081106114c857fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d602081101561154c57600080fd5b5051835184906008858a020190811061156157fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b5051835184906009858a02019081106115fa57fe5b602090810291909101015250600101610fd0565b5098975050505050505050565b60608082516001600160401b038111801561163557600080fd5b5060405190808252806020026020018201604052801561165f578160200160208202803683370190505b50905060005b835181101561170d57600084828151811061167c57fe5b60200260200101519050806001600160a01b031663817b1cd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d60208110156116e957600080fd5b505183518490849081106116f957fe5b602090810291909101015250600101611665565b5092915050565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175057600080fd5b505afa158015611764573d6000803e3d6000fd5b505050506040513d602081101561177a57600080fd5b5051905060005b835181101561183557600084828151811061179857fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d602081101561181b57600080fd5b5051905061182984826157aa565b93505050600101611781565b5090505b92915050565b60606000600290506060818451026001600160401b038111801561186257600080fd5b5060405190808252806020026020018201604052801561188c578160200160208202803683370190505b50905060005b8451811015611a3b5760008582815181106118a957fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561191857866001600160a01b03163183858402815181106118e757fe5b6020026020010181815250506000838584026001018151811061190657fe5b60200260200101818152505050611a33565b806001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561196557600080fd5b505afa158015611979573d6000803e3d6000fd5b505050506040513d602081101561198f57600080fd5b5051835184908487029081106119a157fe5b602002602001018181525050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e657600080fd5b505afa1580156119fa573d6000803e3d6000fd5b505050506040513d6020811015611a1057600080fd5b505183518490600185880201908110611a2557fe5b602002602001018181525050505b600101611892565b50949350505050565b601281565b60606000600690506060818451026001600160401b0381118015611a6c57600080fd5b50604051908082528060200260200182016040528015611a96578160200160208202803683370190505b50905060005b8451811015611a3b576000858281518110611ab357fe5b602090810291909101810151604080516317e1d38560e11b81526001600160a01b0380841660048301526001602483018190526044830152600060648301529151929450908a1692632fc3a70a92608480840193829003018186803b158015611b1b57600080fd5b505afa158015611b2f573d6000803e3d6000fd5b505050506040513d6020811015611b4557600080fd5b505183518490848702908110611b5757fe5b602090810291909101810191909152604080516317e1d38560e11b81526001600160a01b0384811660048301526000602483018190526001604484015260648301529151918a1692632fc3a70a92608480840193829003018186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b505183518490600185880201908110611bfe57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918a16926356c8c2c192604480840193829003018186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d6020811015611c8257600080fd5b505183518490600285880201908110611c9757fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918a16926356c8c2c192604480840193829003018186803b158015611cf157600080fd5b505afa158015611d05573d6000803e3d6000fd5b505050506040513d6020811015611d1b57600080fd5b505183518490600385880201908110611d3057fe5b602002602001018181525050866001600160a01b0316636ce8a44b826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d6020811015611db357600080fd5b5051611dc0576000611dc3565b60015b60ff168385840260040181518110611dd757fe5b602002602001018181525050866001600160a01b03166348cac277826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e3057600080fd5b505afa158015611e44573d6000803e3d6000fd5b505050506040513d6020811015611e5a57600080fd5b505183518490600585880201908110611e6f57fe5b602090810291909101015250600101611a9c565b600080600080876001600160a01b03166381a612d6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611ed657600080fd5b505afa158015611eea573d6000803e3d6000fd5b505050506040513d6020811015611f0057600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038a811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b158015611f5257600080fd5b505afa158015611f66573d6000803e3d6000fd5b505050506040513d6020811015611f7c57600080fd5b505190506000611fa268327cb2734119d3b7a9601e1b611f9c89866157ec565b90615845565b9050611fbe600a83900a611f9c83670de0b6b3a76400006157ec565b905060008a6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561200f57600080fd5b505afa158015612023573d6000803e3d6000fd5b505050506040513d602081101561203957600080fd5b505180156120bc57508a6001600160a01b03166342b60b038a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561208f57600080fd5b505afa1580156120a3573d6000803e3d6000fd5b505050506040513d60208110156120b957600080fd5b50515b905060008161212f578b6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d602081101561212857600080fd5b5051612195565b8b6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561216857600080fd5b505afa15801561217c573d6000803e3d6000fd5b505050506040513d602081101561219257600080fd5b50515b9050600082612208578c6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d757600080fd5b505afa1580156121eb573d6000803e3d6000fd5b505050506040513d602081101561220157600080fd5b505161226e565b8c6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561224157600080fd5b505afa158015612255573d6000803e3d6000fd5b505050506040513d602081101561226b57600080fd5b50515b905060008d6001600160a01b031663c7e074c38e87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b1580156122e257600080fd5b505afa1580156122f6573d6000803e3d6000fd5b505050506040513d602081101561230c57600080fd5b8101908080519060200190929190505050905060008e6001600160a01b031663c7e074c38e88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b15801561239157600080fd5b505afa1580156123a5573d6000803e3d6000fd5b505050506040513d60208110156123bb57600080fd5b5051905060008183116123ce57816123d0565b825b9b509199509750505050505050509450945094915050565b60606000600790506060818451026001600160401b038111801561240b57600080fd5b50604051908082528060200260200182016040528015612435578160200160208202803683370190505b50905060005b8451811015611a3b57600085828151811061245257fe5b60200260200101519050806001600160a01b0316635d50e729886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124a957600080fd5b505afa1580156124bd573d6000803e3d6000fd5b505050506040513d60208110156124d357600080fd5b5051835184908487029081106124e557fe5b602002602001018181525050806001600160a01b031663d5a73fdd886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d602081101561256857600080fd5b50518351849060018588020190811061257d57fe5b60200260200101818152505085828151811061259557fe5b60200260200101516001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156125e957600080fd5b505afa1580156125fd573d6000803e3d6000fd5b505050506040513d602081101561261357600080fd5b50518351849060028588020190811061262857fe5b602002602001018181525050806001600160a01b03166371417b32886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561268157600080fd5b505afa158015612695573d6000803e3d6000fd5b505050506040513d60208110156126ab57600080fd5b5051835184906003858802019081106126c057fe5b602002602001018181525050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561271957600080fd5b505afa15801561272d573d6000803e3d6000fd5b505050506040513d602081101561274357600080fd5b50518351849060048588020190811061275857fe5b602002602001018181525050806001600160a01b03166308f26c76886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127b157600080fd5b505afa1580156127c5573d6000803e3d6000fd5b505050506040513d60208110156127db57600080fd5b5051835184906005858802019081106127f057fe5b602002602001018181525050806001600160a01b03166345f01ee6886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561284957600080fd5b505afa15801561285d573d6000803e3d6000fd5b505050506040513d602081101561287357600080fd5b50518351849060068588020190811061288857fe5b60209081029190910101525060010161243b565b60606000600c905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128e457600080fd5b505afa1580156128f8573d6000803e3d6000fd5b505050506040513d602081101561290e57600080fd5b5051855190915060609084026001600160401b038111801561292f57600080fd5b50604051908082528060200260200182016040528015612959578160200160208202803683370190505b50905060005b865181101561160e57600087828151811061297657fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561299e5750885b846001600160a01b03166352f55eed826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156129eb57600080fd5b505afa1580156129ff573d6000803e3d6000fd5b505050506040513d6020811015612a1557600080fd5b505183518490848902908110612a2757fe5b602002602001018181525050846001600160a01b031663c3c7b9e9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a8057600080fd5b505afa158015612a94573d6000803e3d6000fd5b505050506040513d6020811015612aaa57600080fd5b5051835184906001858a0201908110612abf57fe5b602002602001018181525050846001600160a01b03166383867b2d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b5051835184906002858a0201908110612b5757fe5b602002602001018181525050846001600160a01b0316632c668ec1828b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d6020811015612be257600080fd5b5051835184906003858a0201908110612bf757fe5b602002602001018181525050846001600160a01b031663ab2f3ad4826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c5057600080fd5b505afa158015612c64573d6000803e3d6000fd5b505050506040513d6020811015612c7a57600080fd5b5051835184906004858a0201908110612c8f57fe5b602002602001018181525050846001600160a01b0316634a993ee9826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d6020811015612d1257600080fd5b5051835184906005858a0201908110612d2757fe5b602002602001018181525050846001600160a01b0316639acc6b33826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d8057600080fd5b505afa158015612d94573d6000803e3d6000fd5b505050506040513d6020811015612daa57600080fd5b5051835184906006858a0201908110612dbf57fe5b602002602001018181525050846001600160a01b03166381a612d6826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e1857600080fd5b505afa158015612e2c573d6000803e3d6000fd5b505050506040513d6020811015612e4257600080fd5b5051835184906007858a0201908110612e5757fe5b602002602001018181525050846001600160a01b031663e124e6d2826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612eb057600080fd5b505afa158015612ec4573d6000803e3d6000fd5b505050506040513d6020811015612eda57600080fd5b5051835184906008858a0201908110612eef57fe5b602002602001018181525050846001600160a01b031663f07456ce826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f4857600080fd5b505afa158015612f5c573d6000803e3d6000fd5b505050506040513d6020811015612f7257600080fd5b5051835184906009858a0201908110612f8757fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600060248301529151918716926356c8c2c192604480840193829003018186803b158015612fe157600080fd5b505afa158015612ff5573d6000803e3d6000fd5b505050506040513d602081101561300b57600080fd5b505183518490600a858a020190811061302057fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038481166004830152600160248301529151918716926356c8c2c192604480840193829003018186803b15801561307a57600080fd5b505afa15801561308e573d6000803e3d6000fd5b505050506040513d60208110156130a457600080fd5b505183518490600b858a02019081106130b957fe5b60209081029190910101525060010161295f565b60608082516001600160401b03811180156130e757600080fd5b50604051908082528060200260200182016040528015613111578160200160208202803683370190505b50905060005b835181101561183557846001600160a01b0316631ce9cb8f85838151811061313b57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561318057600080fd5b505afa158015613194573d6000803e3d6000fd5b505050506040513d60208110156131aa57600080fd5b505182518390839081106131ba57fe5b6020908102919091010152600101613117565b60606000600e905060008690506000816001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561321557600080fd5b505afa158015613229573d6000803e3d6000fd5b505050506040513d602081101561323f57600080fd5b5051855190915060609084026001600160401b038111801561326057600080fd5b5060405190808252806020026020018201604052801561328a578160200160208202803683370190505b50905060005b865181101561160e5760008782815181106132a757fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156132cf5750885b60008054600160a01b900460ff166132e8576000613362565b856001600160a01b0316639698d25a836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561333557600080fd5b505afa158015613349573d6000803e3d6000fd5b505050506040513d602081101561335f57600080fd5b50515b9050856001600160a01b03166352f55eed836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133b157600080fd5b505afa1580156133c5573d6000803e3d6000fd5b505050506040513d60208110156133db57600080fd5b505184518590858a029081106133ed57fe5b602002602001018181525050856001600160a01b031663c3c7b9e9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561344657600080fd5b505afa15801561345a573d6000803e3d6000fd5b505050506040513d602081101561347057600080fd5b5051845185906001868b020190811061348557fe5b602002602001018181525050856001600160a01b03166383867b2d836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134de57600080fd5b505afa1580156134f2573d6000803e3d6000fd5b505050506040513d602081101561350857600080fd5b5051845185906002868b020190811061351d57fe5b602002602001018181525050856001600160a01b0316632c668ec1838c6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561357e57600080fd5b505afa158015613592573d6000803e3d6000fd5b505050506040513d60208110156135a857600080fd5b5051845185906003868b02019081106135bd57fe5b602002602001018181525050856001600160a01b031663ab2f3ad4836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561361657600080fd5b505afa15801561362a573d6000803e3d6000fd5b505050506040513d602081101561364057600080fd5b5051845185906004868b020190811061365557fe5b602002602001018181525050856001600160a01b0316634a993ee9836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156136ae57600080fd5b505afa1580156136c2573d6000803e3d6000fd5b505050506040513d60208110156136d857600080fd5b5051845185906005868b02019081106136ed57fe5b602002602001018181525050856001600160a01b0316639acc6b33836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561374657600080fd5b505afa15801561375a573d6000803e3d6000fd5b505050506040513d602081101561377057600080fd5b5051845185906006868b020190811061378557fe5b602002602001018181525050856001600160a01b0316638a78daa8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156137de57600080fd5b505afa1580156137f2573d6000803e3d6000fd5b505050506040513d602081101561380857600080fd5b5051845185906007868b020190811061381d57fe5b60200260200101818152505080848885026008018151811061383b57fe5b602002602001018181525050856001600160a01b03166381a612d6836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561389457600080fd5b505afa1580156138a8573d6000803e3d6000fd5b505050506040513d60208110156138be57600080fd5b5051845185906009868b02019081106138d357fe5b602002602001018181525050856001600160a01b031663e124e6d2836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561392c57600080fd5b505afa158015613940573d6000803e3d6000fd5b505050506040513d602081101561395657600080fd5b505184518590600a868b020190811061396b57fe5b602002602001018181525050856001600160a01b031663f07456ce836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156139c457600080fd5b505afa1580156139d8573d6000803e3d6000fd5b505050506040513d60208110156139ee57600080fd5b505184518590600b868b0201908110613a0357fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600060248301529151918816926356c8c2c192604480840193829003018186803b158015613a5d57600080fd5b505afa158015613a71573d6000803e3d6000fd5b505050506040513d6020811015613a8757600080fd5b505184518590600c868b0201908110613a9c57fe5b602090810291909101810191909152604080516356c8c2c160e01b81526001600160a01b038581166004830152600160248301529151918816926356c8c2c192604480840193829003018186803b158015613af657600080fd5b505afa158015613b0a573d6000803e3d6000fd5b505050506040513d6020811015613b2057600080fd5b505184518590600d868b0201908110613b3557fe5b60209081029190910101525050600101613290565b60606000600290506060818451026001600160401b0381118015613b6d57600080fd5b50604051908082528060200260200182016040528015613b97578160200160208202803683370190505b50905060005b8451811015611a3b576000858281518110613bb457fe5b60200260200101519050806001600160a01b031663402914f5886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613c0b57600080fd5b505afa158015613c1f573d6000803e3d6000fd5b505050506040513d6020811015613c3557600080fd5b505183518490848702908110613c4757fe5b602002602001018181525050806001600160a01b0316632459f51d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c8c57600080fd5b505afa158015613ca0573d6000803e3d6000fd5b505050506040513d6020811015613cb657600080fd5b505183518490600185880201908110613ccb57fe5b602090810291909101015250600101613b9d565b68327cb2734119d3b7a9601e1b81565b60606000600290506060818451026001600160401b0381118015613d1257600080fd5b50604051908082528060200260200182016040528015613d3c578160200160208202803683370190505b5090508560005b85518110156141af576000868281518110613d5a57fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415613d825750865b6000836001600160a01b03166342b60b03836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613dd157600080fd5b505afa158015613de5573d6000803e3d6000fd5b505050506040513d6020811015613dfb57600080fd5b5051613e6b57836001600160a01b031663c4f718bf6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3a57600080fd5b505afa158015613e4e573d6000803e3d6000fd5b505050506040513d6020811015613e6457600080fd5b5051613ed1565b836001600160a01b031663134ca63b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ea457600080fd5b505afa158015613eb8573d6000803e3d6000fd5b505050506040513d6020811015613ece57600080fd5b50515b90506000846001600160a01b031663c3c7b9e9846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613f2257600080fd5b505afa158015613f36573d6000803e3d6000fd5b505050506040513d6020811015613f4c57600080fd5b5051604080516352f55eed60e01b81526001600160a01b0386811660048301529151929350600092918816916352f55eed91602480820192602092909190829003018186803b158015613f9e57600080fd5b505afa158015613fb2573d6000803e3d6000fd5b505050506040513d6020811015613fc857600080fd5b505190508015613ffb57613fe081611f9c85856157ec565b8789870281518110613fee57fe5b6020026020010181815250505b6000866001600160a01b031663c65bc7b1866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561404a57600080fd5b505afa15801561405e573d6000803e3d6000fd5b505050506040513d602081101561407457600080fd5b5051111561419f576000866001600160a01b031663a93acac2866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156140cb57600080fd5b505afa1580156140df573d6000803e3d6000fd5b505050506040513d60208110156140f557600080fd5b50516040805163c65bc7b160e01b81526001600160a01b0388811660048301529151929350600092918a169163c65bc7b191602480820192602092909190829003018186803b15801561414757600080fd5b505afa15801561415b573d6000803e3d6000fd5b505050506040513d602081101561417157600080fd5b5051905061417f8183615887565b898b89026001018151811061419057fe5b60200260200101818152505050505b505060019092019150613d439050565b5090925050505b9392505050565b6000546001600160a01b03163314614214576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b60008054911515600160a01b0260ff60a01b19909216919091179055565b80516060906002908190839082900482026001600160401b038111801561425857600080fd5b50604051908082528060200260200182016040528015614282578160200160208202803683370190505b50905060005b8386518161429257fe5b0481101561449457600086858302815181106142aa57fe5b60200260200101519050600087868402600101815181106142c757fe5b602002602001015190506000896001600160a01b031663e6a4390584846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561433157600080fd5b505afa158015614345573d6000803e3d6000fd5b505050506040513d602081101561435b57600080fd5b5051604080516370a0823160e01b81526001600160a01b0380841660048301529151929350908516916370a0823191602480820192602092909190829003018186803b1580156143aa57600080fd5b505afa1580156143be573d6000803e3d6000fd5b505050506040513d60208110156143d457600080fd5b5051855186908689029081106143e657fe5b602002602001018181525050816001600160a01b03166370a08231826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561443f57600080fd5b505afa158015614453573d6000803e3d6000fd5b505050506040513d602081101561446957600080fd5b5051855186906001878a020190811061447e57fe5b6020908102919091010152505050600101614288565b5095945050505050565b600981565b600054600160a01b900460ff1681565b6000546001600160a01b0316331461450a576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000866001600160a01b03166381a612d6876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561457e57600080fd5b505afa158015614592573d6000803e3d6000fd5b505050506040513d60208110156145a857600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156145fa57600080fd5b505afa15801561460e573d6000803e3d6000fd5b505050506040513d602081101561462457600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0389811660048301529151929350600092918b1691638ee573ac91602480820192602092909190829003018186803b15801561467657600080fd5b505afa15801561468a573d6000803e3d6000fd5b505050506040513d60208110156146a057600080fd5b505190506000806146c168327cb2734119d3b7a9601e1b611f9c8a886157ec565b90506146dd600a85900a611f9c83670de0b6b3a76400006157ec565b905060008b6001600160a01b03166342b60b038c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561472e57600080fd5b505afa158015614742573d6000803e3d6000fd5b505050506040513d602081101561475857600080fd5b505180156147db57508b6001600160a01b03166342b60b038b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156147ae57600080fd5b505afa1580156147c2573d6000803e3d6000fd5b505050506040513d60208110156147d857600080fd5b50515b905060008161484e578c6001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b15801561481d57600080fd5b505afa158015614831573d6000803e3d6000fd5b505050506040513d602081101561484757600080fd5b50516148b4565b8c6001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561488757600080fd5b505afa15801561489b573d6000803e3d6000fd5b505050506040513d60208110156148b157600080fd5b50515b9050600082614927578d6001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156148f657600080fd5b505afa15801561490a573d6000803e3d6000fd5b505050506040513d602081101561492057600080fd5b505161498d565b8d6001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561496057600080fd5b505afa158015614974573d6000803e3d6000fd5b505050506040513d602081101561498a57600080fd5b50515b905060008e6001600160a01b031663c7e074c38f87868660016040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614a0157600080fd5b505afa158015614a15573d6000803e3d6000fd5b505050506040513d6020811015614a2b57600080fd5b8101908080519060200190929190505050905060008f6001600160a01b031663c7e074c38f88878760006040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200183815260200182151581526020019550505050505060206040518083038186803b158015614ab057600080fd5b505afa158015614ac4573d6000803e3d6000fd5b505050506040513d6020811015614ada57600080fd5b50519050808211614aeb5780614aed565b815b965050505050505060008a6001600160a01b031663e124e6d28a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614b4457600080fd5b505afa158015614b58573d6000803e3d6000fd5b505050506040513d6020811015614b6e57600080fd5b505190506000614b8282611f9c8b896157ec565b9050614ba185600a0a611f9c86600a0a846157ec90919063ffffffff16565b90506000614bbf612710611f9c614bb882886157aa565b85906157ec565b90506000614bcd83836157aa565b919e919d50909b505050505050505050505050565b60608082516001600160401b0381118015614bfc57600080fd5b50604051908082528060200260200182016040528015614c26578160200160208202803683370190505b50905060005b8351811015611835576000848281518110614c4357fe5b6020026020010151905060006001600160a01b0316816001600160a01b03161415614c9157856001600160a01b031631838381518110614c7f57fe5b60200260200101818152505050614d26565b806001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614cde57600080fd5b505afa158015614cf2573d6000803e3d6000fd5b505050506040513d6020811015614d0857600080fd5b50518351849084908110614d1857fe5b602002602001018181525050505b600101614c2c565b60608060098551026001600160401b0381118015614d4b57600080fd5b50604051908082528060200260200182016040528015614d75578160200160208202803683370190505b50905060005b855181101561511f5760008060008060008060008e6001600160a01b0316634a3f088d8f8f8b81518110614dab57fe5b60200260200101518f8c81518110614dbf57fe5b60200260200101518f8d81518110614dd357fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b0316815260200182151581526020019450505050506101006040518083038186803b158015614e4257600080fd5b505afa158015614e56573d6000803e3d6000fd5b505050506040513d610100811015614e6d57600080fd5b50805160208201516040830151606084015160a085015160c086015160e0909601518f51959d50939b509199509750955091935090915087908a9060098b02908110614eb557fe5b602002602001018181525050858960098a0260010181518110614ed457fe5b602002602001018181525050848960098a0260020181518110614ef357fe5b602002602001018181525050838960098a0260030181518110614f1257fe5b60200260200101818152505081614f2a576000614f2d565b60015b60ff168960098a0260040181518110614f4257fe5b602002602001018181525050828960098a0260050181518110614f6157fe5b602002602001018181525050808960098a0260060181518110614f8057fe5b602002602001018181525050505050505050506000826009830281518110614fa457fe5b602002602001015190506000836009840260020181518110614fc257fe5b602002602001015190506000846009850260060181518110614fe057fe5b602002602001015190506000821115615114576000808c6001600160a01b0316635c07eaab8b888151811061501157fe5b602002602001015187878d8b8151811061502757fe5b6020026020010151886040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001831515815260200182815260200195505050505050604080518083038186803b15801561508a57600080fd5b505afa15801561509e573d6000803e3d6000fd5b505050506040513d60408110156150b457600080fd5b5080516020909101519092509050816150ce5760006150d1565b60015b60ff168760098802600701815181106150e657fe5b6020026020010181815250508087600988026008018151811061510557fe5b60200260200101818152505050505b505050600101614d7b565b509695505050505050565b600080846001600160a01b03166381a612d6856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561517a57600080fd5b505afa15801561518e573d6000803e3d6000fd5b505050506040513d60208110156151a457600080fd5b505160408051637092736960e11b81526001600160a01b03868116600483015291519293506000929188169163e124e6d291602480820192602092909190829003018186803b1580156151f657600080fd5b505afa15801561520a573d6000803e3d6000fd5b505050506040513d602081101561522057600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038881166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561527257600080fd5b505afa158015615286573d6000803e3d6000fd5b505050506040513d602081101561529c57600080fd5b5051604080516323b95ceb60e21b81526001600160a01b0388811660048301529151929350600092918a1691638ee573ac91602480820192602092909190829003018186803b1580156152ee57600080fd5b505afa158015615302573d6000803e3d6000fd5b505050506040513d602081101561531857600080fd5b5051604080516352f55eed60e01b81526001600160a01b038981166004830152915192935060009283928c16916352f55eed916024808301926020929190829003018186803b15801561536a57600080fd5b505afa15801561537e573d6000803e3d6000fd5b505050506040513d602081101561539457600080fd5b50516040805163c3c7b9e960e01b81526001600160a01b038b811660048301529151929350600092918d169163c3c7b9e991602480820192602092909190829003018186803b1580156153e657600080fd5b505afa1580156153fa573d6000803e3d6000fd5b505050506040513d602081101561541057600080fd5b505160408051634a993ee960e01b81526001600160a01b038c811660048301529151929350600092918e1691634a993ee991602480820192602092909190829003018186803b15801561546257600080fd5b505afa158015615476573d6000803e3d6000fd5b505050506040513d602081101561548c57600080fd5b50519050600081831161549f57816154a1565b825b90508381106154bc57600099505050505050505050506141b6565b60006154c885836157aa565b90506154f587600a0a611f9c8a600a0a6154ef8e611f9c8f886157ec90919063ffffffff16565b906157ec565b955050505050506000896001600160a01b0316639acc6b338a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561554b57600080fd5b505afa15801561555f573d6000803e3d6000fd5b505050506040513d602081101561557557600080fd5b50519050801561160e57896001600160a01b03166383867b2d8a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156155cc57600080fd5b505afa1580156155e0573d6000803e3d6000fd5b505050506040513d60208110156155f657600080fd5b505181101561560e57600096505050505050506141b6565b60006156938b6001600160a01b03166383867b2d8c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561566057600080fd5b505afa158015615674573d6000803e3d6000fd5b505050506040513d602081101561568a57600080fd5b505183906157aa565b90506156af670de0b6b3a7640000611f9c83600a89900a6157ec565b90506156cb87611f9c8368327cb2734119d3b7a9601e1b6157ec565b9050808311156156e35796506141b695505050505050565b505098975050505050505050565b600080805b835181101561183557600084828151811061570d57fe5b602002602001015190506000866001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561576657600080fd5b505afa15801561577a573d6000803e3d6000fd5b505050506040513d602081101561579057600080fd5b5051905061579e8482615887565b935050506001016156f6565b60006141b683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506158e1565b6000826157fb57506000611839565b8282028284828161580857fe5b04146141b65760405162461bcd60e51b81526004018080602001828103825260218152602001806159de6021913960400191505060405180910390fd5b60006141b683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615978565b6000828201838110156141b6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156159705760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561593557818101518382015260200161591d565b50505050905090810190601f1680156159625780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836159c75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561593557818101518382015260200161591d565b5060008385816159d357fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/peripherals/Reader.sol:Reader",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26452,
        "contract": "contracts/peripherals/Reader.sol:Reader",
        "label": "hasMaxGlobalShortSizes",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}